{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Worldpay Within\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \nWhat it is\n\n    \nWorldpay Within is an embeddable payments agent that can be 'plugged' into an app or smart device. It lets you discover other devices and pay for that device's service(s). We've got the SDK in five languages: \nPython\n, \n.NET\n, \nNode.js\n, \nJava\n and \nGo\n.\n\n    \nWatch the demo\n\n  \n\n\n\n\n\n\n  \n\n     \n\n  \n\n  \n\n    \nWhy use it\n\n    \nYou can make or take payments from an IoT device. Maybe your car is running out of fuel and it broadcasts a need for petrol; perhaps you're a petrol station that has a service to offer.\n\n    \nFind out more\n\n\n  \n\n\n\n\n\n\n  \n\n    \n\n  \n\n  \n\n    \nHow it works\n\n    \nThere are four simple interactions that take place with Worldpay Within: \nDiscover\n, \nSelect\n, \nPay\n and \nRelease\n.\n\n    \nFind out more\n\n  \n\n\n\n\n\n\n  \n\n    \nA demonstration\n\n    \n  \n\n  \n\n  \n\n    \n\n  \n\n\n\n\n\nWhat it is\n\n\nDriven by the \nInternet of Things\n (IoT), Worldpay is keen to demonstrate how you can integrate payments into everyday objects. So we created Worldpay Within.\n\n\nWe\u2019ve got a series of \nopen source\n software development kits (SDKs) that let you make and accept payments from a range of devices. We\u2019ve got SDKs for \nNode.js\n, \nPython\n, \nJava\n, \n.NET\n and \nGo\n. You can download these SDKs, get playing, configure your setup, and recommend changes to our open source libraries.\n\n\n Why use it\n\n\nYou might want to use Worldpay Within if you\u2019re a startup company that\u2019s creating technologies relating to the Internet of Things. Or perhaps you\u2019re a hobby developer who likes creating innovative technologies in your spare time.\n\n\nWorldpay Within provides you with the functionality and the SDKs to explore how the Internet of Things allows you to test the interaction between two devices and see how devices can make and receive payments.\n\n\n How it works\n\n\nThere are four simple interactions that take place with Worldpay Within: \nDiscover\n, \nSelect\n, \nPay\n and \nRelease\n.\n\n\nImagine that a car needs some fuel. It stops by a petrol station and broadcasts that it needs fuel. The petrol station receives this signal, informs the car of how much fuel costs and what options are available, and once the shopper has made a choice, Worldpay will process the payment and inform the petrol station that it can fuel the car.\n\n\n\n\nA demonstration of how to use Worldpay Within in four easy interactions\n\n\n\n\nDiscover\n - \nThing A (shopper)\n broadcasts to \nThing B (merchant)\n that it requires something.\n\n\nSelect\n - When \nThing B\n receives \nThing A\u2019s\n broadcast, it presents the options and the shopper chooses one.\n\n\nPay\n - \nThing A\n pays.\n\n\nRelease\n - Worldpay sends \nThing B\n a secure token (a trusted trigger) to release the service to \nThing A.\n\n\n\n\n The Internet of Things\n\n\nThe Internet of Things (IoT) is an initiative to connect everyday items to the internet. It could be a car which needs to pay for fuel or repairs, or a fridge which needs to order some groceries.\n\n\nIt's been estimated\n that there will be 6 billion devices connected to the IoT by the end of 2016 and 20 billion by 2020. Some of these devices will consume services from other devices for which a payment will be required.\n\n\nBy using a set of APIs, \u201cThing\u201d developers will be able to integrate Worldpay Within into their IoT device, enabling the \u201cThing\u201d to make and/or receive payments for services to and from other \u201cThings\u201d.\n\n\nWorldpay Within orchestrates smart things talking to each other and paying for services.\n\n\nHackathons\n\n\nIn 2016, Worldpay hosted the \nPayments \n IOT Hackathon\n in which we wanted to take digital payments to the next level. In 2017, we're hosting another Hackathon in Romania, in which we release Worldpay Within.\n\n\nWant to find out more? Head over to the \nHackathons\n page.\n\n\n It's open source\n\n\nWorldpay Within is open source, so why not give it a go yourself? You can find the GitHub library \nhere\n.\n\n\nIt's still an alpha-based experiment, but we're actively building new features (and bug fixes) and are concurrently working on evolving the security architecture so we can take real payments.\n\n\nWe'd love to see what you can come up with, so why not become a contributor? Head over to the \nIssues page\n to see how you can help. \n\n\nGet the SDKs\n\n\nWorldpay Within's SDK is written in GoLang and runs on smart devices, including Raspberry Pi. It lets you make and receive payments within the IoT. You can download the SDK in any of these languages and begin testing:\n\n\n  \nNode.js\n\n  \nPython\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n\n\n\nContact us\n\n\nIf you've got any questions, or if you want to find out more, why not give us a shout at \nInnovation@Worldpay.com\n.\nYou can also contribute to our \nGitHub repository\n by \nlooking at our issues\n or becoming a contributor.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-worldpay-within", 
            "text": "", 
            "title": "Welcome to Worldpay Within"
        }, 
        {
            "location": "/#what-it-is", 
            "text": "Driven by the  Internet of Things  (IoT), Worldpay is keen to demonstrate how you can integrate payments into everyday objects. So we created Worldpay Within.  We\u2019ve got a series of  open source  software development kits (SDKs) that let you make and accept payments from a range of devices. We\u2019ve got SDKs for  Node.js ,  Python ,  Java ,  .NET  and  Go . You can download these SDKs, get playing, configure your setup, and recommend changes to our open source libraries.", 
            "title": "What it is"
        }, 
        {
            "location": "/#hackathons", 
            "text": "In 2016, Worldpay hosted the  Payments   IOT Hackathon  in which we wanted to take digital payments to the next level. In 2017, we're hosting another Hackathon in Romania, in which we release Worldpay Within.  Want to find out more? Head over to the  Hackathons  page.", 
            "title": "Hackathons"
        }, 
        {
            "location": "/#get-the-sdks", 
            "text": "Worldpay Within's SDK is written in GoLang and runs on smart devices, including Raspberry Pi. It lets you make and receive payments within the IoT. You can download the SDK in any of these languages and begin testing: \n   Node.js \n   Python \n   Java \n   .NET \n   Go", 
            "title": "Get the SDKs"
        }, 
        {
            "location": "/#contact-us", 
            "text": "If you've got any questions, or if you want to find out more, why not give us a shout at  Innovation@Worldpay.com .\nYou can also contribute to our  GitHub repository  by  looking at our issues  or becoming a contributor.", 
            "title": "Contact us"
        }, 
        {
            "location": "/get-started/", 
            "text": "New to Worldpay Within\n\n\nIf you're new to Worldpay Within, you can download the SDK in any of these languages and begin testing:\n\n\n  \nNode.js\n\n  \nPython\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n\n\n\nAn experienced user\n\n\nIf you're familiar with how Worldpay Within works, and have used the SDKs before, you can find out more in our Advanced section:\n\n\n\n\nHow it works\n\n\nArchitecture\n\n\nInternal structure\n\n\nSample service messaging\n\n\nAPI Specification\n\n\n\n\nUseful terms\n\n\nTerms we're using in our SDKs and docs.\n\n\n\n\n\n\n\n\nTerm\n\n\nDefinition\n\n\n\n\n\n\n\n\n\n\nAPI\n\n\nApplication Programming Interface\n\n\n\n\n\n\nWorldpay\n\n\nWorldpay Online Payment API, \nhttps://online.worldpay.com/\n\n\n\n\n\n\nHCE\n\n\nHost Card Emulation\n\n\n\n\n\n\nHTE\n\n\nHost Terminal Emulation\n\n\n\n\n\n\nHTTPS\n\n\nHyperText Transfer Protocol Secure\n\n\n\n\n\n\nIoT\n\n\nInternet of Things\n\n\n\n\n\n\nP2PE\n\n\nPoint to Point Encryption\n\n\n\n\n\n\nTLS\n\n\nTransport Layer Security\n\n\n\n\n\n\nUUID\n\n\nUniversally Unique Identifier\n\n\n\n\n\n\nRPC\n\n\nRemote Procedure Call", 
            "title": "Get started"
        }, 
        {
            "location": "/get-started/#new-to-worldpay-within", 
            "text": "If you're new to Worldpay Within, you can download the SDK in any of these languages and begin testing: \n   Node.js \n   Python \n   Java \n   .NET \n   Go", 
            "title": "New to Worldpay Within"
        }, 
        {
            "location": "/get-started/#an-experienced-user", 
            "text": "If you're familiar with how Worldpay Within works, and have used the SDKs before, you can find out more in our Advanced section:   How it works  Architecture  Internal structure  Sample service messaging  API Specification", 
            "title": "An experienced user"
        }, 
        {
            "location": "/get-started/#useful-terms", 
            "text": "Terms we're using in our SDKs and docs.     Term  Definition      API  Application Programming Interface    Worldpay  Worldpay Online Payment API,  https://online.worldpay.com/    HCE  Host Card Emulation    HTE  Host Terminal Emulation    HTTPS  HyperText Transfer Protocol Secure    IoT  Internet of Things    P2PE  Point to Point Encryption    TLS  Transport Layer Security    UUID  Universally Unique Identifier    RPC  Remote Procedure Call", 
            "title": "Useful terms"
        }, 
        {
            "location": "/nodejs/", 
            "text": "The Node.js implementation for the Worldpay Within IoT payment SDK. This SDK enables smart devices to discover each other, negotiate a price for services, make a payment (through Worldpay) for services, and then consume services via a \ntrusted trigger\n. For an overview, see \nHome\n.\n\n\nPrerequisites\n\n\nBefore you get started:\n\n\n\n\nInstall \nNode.js\n on your system. We've tested this wrapper with version 8.6.0 on Ubuntu and 4.8.4 on Raspberry Pi.\n\n\nIf you do not have it, install \ngit\n.\n\n\nInstall \nnpm\n on your machine. We've tested version 5.5.1 on Ubuntu and 2.5.11 on Raspberry Pi.\n\n\nCreate an account with \nWorldpay Online\n so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK. \n\n\n\n\n\n\nWarning\n\n\nMake sure you only use test API keys.\n\n\n\n\nGet started\n\n\nOnce you've got Node.js and npm.js, you should be good to go.\n\n\n\n\nClone or download \nthe repository\n: \ngit clone https://github.com/WPTechInnovation/wpw-sdk-nodejs.git\n\n\nChange to the folder \ncd wpw-sdk-nodejs\n\n\nUpdate the submodules: \ngit submodule update --init --recursive\n\n\nDownload the required modules: \nnpm install\n\n\n\n\n\n\nNote\n\n\nIf you are using a different package manager than npm, please adjust the command accordingly.\n\n(If there are issues about access rights, add \nsudo\n in front of the above command)\n\n\n\n\nRun the examples\n\n\nNow you can start testing to see if it works. We'd recommend using your own test API keys for this. We've left ours in the code, but you won't be able to see the payments with our keys.\n\n\n\n\nIn one terminal/cmd (or on one device) run: \nnode example-producer-callbacks.js\n\n\nIn another terminal/cmd, (or on another device, on the same network) run: \nnode example-consumer.js\n\n\nA payment should fire. If you see the \nserviceDeliveryToken\n returned within the producer terminal/cmd, you'll know that the payment was complete. This payment will happen with our test keys, so you won't be able to see the payment.\n\n\n\n\nCreating your own keys\n\n\nYou can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.\n\n\n\n\nWarning\n\n\nMake sure you only use test keys.\n\n\n\n\nTo add your own test API keys:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGo to \nSettings\n.\n\n\nThen click \nAPI Keys\n.\n\n\nGrab your \nService key\n and \nClient key\n. They'll look something like this: \nT_S_fd00db67-b77b-4d6e-1a2a-45f65123f795\n.\n\n\nFind the config folder of the SDK and find the producer JSON files.\n\n\nAdd your Service and Client keys:\n\n\nThe \npspConfig.merchant_client_key\n and \npspConfig.hte_public_key\n must have the same key.\n\n\nThe \npspConfig.merchant_service_key\n and \npspConfig.hte_private_key\n must have the same keys.\n\n\n\n\n\n\nSave your work.\n\n\n\n\nOnce you've added your own test keys, you'll be able to start testing your payments.\n\n\nSeeing your payments\n\n\nNow that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the \nRun the examples\n topic for more information about this.\n\n\nTo see your test payments:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nOn the homepage, scroll down to the \nRecent Orders\n section.\n\n\nYour payments are here. You'll be able to see:\n\n\nOrder Code\n - The order code\n\n\nCustomer Order Code\n - The customer's order code\n\n\nGross Amount\n - The gross amount of the order\n\n\nState\n - The state of the order. For example, SUCCESS or AUTHORIZED\n\n\nPayment type\n - The type of payment. For example, ECOM\n\n\nOrder type\n  - The type of order. For example, VISA_CREDIT or VISA_DEBIT\n\n\nUpdated\n - The last time the payment state changed\n\n\n\n\n\n\n\n\nFor more information, refer to the \nWorldpay Online documentation\n.\n\n\nDebugging\n\n\nIf you're having trouble, you can contact us at \nInnovation@Worldpay.com\n. Alternatively, you can \nraise an issue in GitHub\n.\n\n\nOS-specific issues\n\n\nOn Debain 14, the default version of Node.JS is 0.10. Distributions based on it such as Raspbian and Ubuntu would be impacted as well. To install Node.JS 8.x:\n\n\n\n\nIn a terminal, run \ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n\n\nThen do \nsudo apt-get install -y nodejs\n\n\n\n\nTo install Node.JS 4.x (Long Time Support release):\n\n\n\n\nIn a terminal, run \ncurl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash-\n\n\nThen do \nsudo apt-get install -y nodejs\n \n\n\n\n\nSo what's happening?\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases; \nDiscover\n, \nSelect\n, \nPay\n, and \nRelease\n. For more information, see \nHome\n.\n\n\nWhat IoT devices can I run this on?\n\n\n\n\nNote\n\n\nThe devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...\n\n\n\n\nWant to contribute?\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n.", 
            "title": "Node.js"
        }, 
        {
            "location": "/nodejs/#prerequisites", 
            "text": "Before you get started:   Install  Node.js  on your system. We've tested this wrapper with version 8.6.0 on Ubuntu and 4.8.4 on Raspberry Pi.  If you do not have it, install  git .  Install  npm  on your machine. We've tested version 5.5.1 on Ubuntu and 2.5.11 on Raspberry Pi.  Create an account with  Worldpay Online  so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.     Warning  Make sure you only use test API keys.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/nodejs/#get-started", 
            "text": "Once you've got Node.js and npm.js, you should be good to go.   Clone or download  the repository :  git clone https://github.com/WPTechInnovation/wpw-sdk-nodejs.git  Change to the folder  cd wpw-sdk-nodejs  Update the submodules:  git submodule update --init --recursive  Download the required modules:  npm install    Note  If you are using a different package manager than npm, please adjust the command accordingly. \n(If there are issues about access rights, add  sudo  in front of the above command)", 
            "title": "Get started"
        }, 
        {
            "location": "/nodejs/#run-the-examples", 
            "text": "Now you can start testing to see if it works. We'd recommend using your own test API keys for this. We've left ours in the code, but you won't be able to see the payments with our keys.   In one terminal/cmd (or on one device) run:  node example-producer-callbacks.js  In another terminal/cmd, (or on another device, on the same network) run:  node example-consumer.js  A payment should fire. If you see the  serviceDeliveryToken  returned within the producer terminal/cmd, you'll know that the payment was complete. This payment will happen with our test keys, so you won't be able to see the payment.", 
            "title": "Run the examples"
        }, 
        {
            "location": "/nodejs/#creating-your-own-keys", 
            "text": "You can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.   Warning  Make sure you only use test keys.   To add your own test API keys:   Login to  Worldpay Online .  Go to  Settings .  Then click  API Keys .  Grab your  Service key  and  Client key . They'll look something like this:  T_S_fd00db67-b77b-4d6e-1a2a-45f65123f795 .  Find the config folder of the SDK and find the producer JSON files.  Add your Service and Client keys:  The  pspConfig.merchant_client_key  and  pspConfig.hte_public_key  must have the same key.  The  pspConfig.merchant_service_key  and  pspConfig.hte_private_key  must have the same keys.    Save your work.   Once you've added your own test keys, you'll be able to start testing your payments.", 
            "title": "Creating your own keys"
        }, 
        {
            "location": "/nodejs/#seeing-your-payments", 
            "text": "Now that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the  Run the examples  topic for more information about this.  To see your test payments:   Login to  Worldpay Online .  On the homepage, scroll down to the  Recent Orders  section.  Your payments are here. You'll be able to see:  Order Code  - The order code  Customer Order Code  - The customer's order code  Gross Amount  - The gross amount of the order  State  - The state of the order. For example, SUCCESS or AUTHORIZED  Payment type  - The type of payment. For example, ECOM  Order type   - The type of order. For example, VISA_CREDIT or VISA_DEBIT  Updated  - The last time the payment state changed     For more information, refer to the  Worldpay Online documentation .", 
            "title": "Seeing your payments"
        }, 
        {
            "location": "/nodejs/#debugging", 
            "text": "If you're having trouble, you can contact us at  Innovation@Worldpay.com . Alternatively, you can  raise an issue in GitHub .", 
            "title": "Debugging"
        }, 
        {
            "location": "/nodejs/#os-specific-issues", 
            "text": "On Debain 14, the default version of Node.JS is 0.10. Distributions based on it such as Raspbian and Ubuntu would be impacted as well. To install Node.JS 8.x:   In a terminal, run  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -  Then do  sudo apt-get install -y nodejs   To install Node.JS 4.x (Long Time Support release):   In a terminal, run  curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash-  Then do  sudo apt-get install -y nodejs", 
            "title": "OS-specific issues"
        }, 
        {
            "location": "/nodejs/#so-whats-happening", 
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases;  Discover ,  Select ,  Pay , and  Release . For more information, see  Home .", 
            "title": "So what's happening?"
        }, 
        {
            "location": "/nodejs/#what-iot-devices-can-i-run-this-on", 
            "text": "Note  The devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...", 
            "title": "What IoT devices can I run this on?"
        }, 
        {
            "location": "/nodejs/#want-to-contribute", 
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com .", 
            "title": "Want to contribute?"
        }, 
        {
            "location": "/python27/", 
            "text": "The Python implementation for the Worldpay Within IoT payment SDK. This SDK enables smart devices to discover each other, negotiate a price for services, make a payment (through Worldpay) for services, and then consume services via a \ntrusted trigger\n. For an overview, see \nHome\n.\n\n\nPrerequisites\n\n\nBefore you get started:\n\n\n\n\nInstall Python on your system. We've built the SDK to work with version 2.7.\n\n\nIf you do not have it, install \ngit\n.\n\n\nVerify that the command \npython\n is available to run without specifying the whole path and update the PATH environment if required.\n\n\nOn some UNIX operating systems, such as Debian, you must additionally install setup tools: \nsudo apt install python-setuptools\n\n\nCreate an account with \nWorldpay Online\n so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.\n\n\n\n\n\n\nWarning\n\n\nMake sure you only use test API keys.\n\n\n\n\nGet started\n\n\n\n\nClone the \nrepository\n: \ngit clone https://github.com/WPTechInnovation/wpw-sdk-python.git\n\n\nChange to the directory (for example, \ncd wpw-sdk-python\n)\n\n\nRun \ngit submodule update --init --recursive\n\n\nAs an administrator, run \nsudo python setup.py install\n\n\n\n\nRun the examples\n\n\nYou can try the examples by running them in two different console windows. Or, if you're installing on two separate devices, they must be on the same network that allows UDP broadcast traffic. Make sure you're using rhw Online Worldpay (OWP) files rather than the Worldpay Total (WT) ones.\n\n\n\n\nIn the first window, run: \npython runProducerOWP.py\n or \npython runProducerCallbacksOWP.py\n\n\nIn the second window, run: \npython runConsumerOWP.py\n\n\nThe two smart devices should communicate with each other and make a payment.\n\n\n\n\nCreating your own keys\n\n\nYou can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.\n\n\n\n\nWarning\n\n\nMake sure you only use test keys.\n\n\n\n\nTo add your own test API keys:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGo to \nSettings\n.\n\n\nThen click \nAPI Keys\n.\n\n\nGrab your \nService key\n and \nClient key\n. They'll look something like this: \nT_S_fd00db67-b77b-4d6e-1a2a-45f65123f795\n.\n\n\nFind the config folder of the SDK and find the producer JSON files.\n\n\nAdd your Service and Client keys:\n\n\nThe \npspConfig.merchant_client_key\n and \npspConfig.hte_public_key\n must have the same key.\n\n\nThe \npspConfig.merchant_service_key\n and \npspConfig.hte_private_key\n must have the same keys.\n\n\n\n\n\n\nSave your work.\n\n\n\n\nOnce you've added your own test keys, you'll be able to start testing your payments.\n\n\nSeeing your payments\n\n\nNow that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the \nRun the examples\n topic for more information about this.\n\n\nTo see your test payments:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nOn the homepage, scroll down to the \nRecent Orders\n section.\n\n\nYour payments are here. You'll be able to see:\n\n\nOrder Code\n - The order code\n\n\nCustomer Order Code\n - The customer's order code\n\n\nGross Amount\n - The gross amount of the order\n\n\nState\n - The state of the order. For example, SUCCESS or AUTHORIZED\n\n\nPayment type\n - The type of payment. For example, ECOM\n\n\nOrder type\n  - The type of order. For example, VISA_CREDIT or VISA_DEBIT\n\n\nUpdated\n - The last time the payment state changed\n\n\n\n\n\n\n\n\nFor more information, refer to the \nWorldpay Online documentation\n.\n\n\nDebugging\n\n\nIf you're having trouble, you can contact us at \nInnovation@Worldpay.com\n. Alternatively, you can \nraise an issue in GitHub\n.\n\n\nSo what's happening?\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases; \nDiscover\n, \nSelect\n, \nPay\n, and \nRelease\n. For more information, see \nWorldpay Within\n.\n\n\nWhat IoT devices can I run this on?\n\n\n\n\nNote\n\n\nThe devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...\n\n\n\n\nWant to contribute?\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n.", 
            "title": "Python"
        }, 
        {
            "location": "/python27/#prerequisites", 
            "text": "Before you get started:   Install Python on your system. We've built the SDK to work with version 2.7.  If you do not have it, install  git .  Verify that the command  python  is available to run without specifying the whole path and update the PATH environment if required.  On some UNIX operating systems, such as Debian, you must additionally install setup tools:  sudo apt install python-setuptools  Create an account with  Worldpay Online  so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.    Warning  Make sure you only use test API keys.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/python27/#get-started", 
            "text": "Clone the  repository :  git clone https://github.com/WPTechInnovation/wpw-sdk-python.git  Change to the directory (for example,  cd wpw-sdk-python )  Run  git submodule update --init --recursive  As an administrator, run  sudo python setup.py install", 
            "title": "Get started"
        }, 
        {
            "location": "/python27/#run-the-examples", 
            "text": "You can try the examples by running them in two different console windows. Or, if you're installing on two separate devices, they must be on the same network that allows UDP broadcast traffic. Make sure you're using rhw Online Worldpay (OWP) files rather than the Worldpay Total (WT) ones.   In the first window, run:  python runProducerOWP.py  or  python runProducerCallbacksOWP.py  In the second window, run:  python runConsumerOWP.py  The two smart devices should communicate with each other and make a payment.", 
            "title": "Run the examples"
        }, 
        {
            "location": "/python27/#creating-your-own-keys", 
            "text": "You can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.   Warning  Make sure you only use test keys.   To add your own test API keys:   Login to  Worldpay Online .  Go to  Settings .  Then click  API Keys .  Grab your  Service key  and  Client key . They'll look something like this:  T_S_fd00db67-b77b-4d6e-1a2a-45f65123f795 .  Find the config folder of the SDK and find the producer JSON files.  Add your Service and Client keys:  The  pspConfig.merchant_client_key  and  pspConfig.hte_public_key  must have the same key.  The  pspConfig.merchant_service_key  and  pspConfig.hte_private_key  must have the same keys.    Save your work.   Once you've added your own test keys, you'll be able to start testing your payments.", 
            "title": "Creating your own keys"
        }, 
        {
            "location": "/python27/#seeing-your-payments", 
            "text": "Now that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the  Run the examples  topic for more information about this.  To see your test payments:   Login to  Worldpay Online .  On the homepage, scroll down to the  Recent Orders  section.  Your payments are here. You'll be able to see:  Order Code  - The order code  Customer Order Code  - The customer's order code  Gross Amount  - The gross amount of the order  State  - The state of the order. For example, SUCCESS or AUTHORIZED  Payment type  - The type of payment. For example, ECOM  Order type   - The type of order. For example, VISA_CREDIT or VISA_DEBIT  Updated  - The last time the payment state changed     For more information, refer to the  Worldpay Online documentation .", 
            "title": "Seeing your payments"
        }, 
        {
            "location": "/python27/#debugging", 
            "text": "If you're having trouble, you can contact us at  Innovation@Worldpay.com . Alternatively, you can  raise an issue in GitHub .", 
            "title": "Debugging"
        }, 
        {
            "location": "/python27/#so-whats-happening", 
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases;  Discover ,  Select ,  Pay , and  Release . For more information, see  Worldpay Within .", 
            "title": "So what's happening?"
        }, 
        {
            "location": "/python27/#what-iot-devices-can-i-run-this-on", 
            "text": "Note  The devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...", 
            "title": "What IoT devices can I run this on?"
        }, 
        {
            "location": "/python27/#want-to-contribute", 
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com .", 
            "title": "Want to contribute?"
        }, 
        {
            "location": "/java/", 
            "text": "The Java implementation for the Worldpay Within IoT payment SDK. This SDK enables smart devices to discover each other, negotiate a price for services, make a payment (through Worldpay) for services, and then consume services via a \ntrusted trigger\n. For an overview, see \nHome\n.\n\n\nYou can find the Java SDK \nhere\n.\n\n\nPrerequisites\n\n\nBefore you get started:\n\n\n\n\nInstall Java JDK 1.8 on your systems.\n\n\nSet the \nJAVA_HOME\n variable and make sure it points to your JDK installation directory.\n\n\nIf you do not have it, install \ngit\n.\n\n\nInstall \nApache Maven\n and add it to PATH.\n\n\nCreate an account with \nWorldpay Online\n so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.\n\n\n\n\n\n\nWarning\n\n\nMake sure you only use test API keys.\n\n\n\n\nGet started\n\n\n\n\nClone the repository: \ngit clone https://github.com/WPTechInnovation/wpw-sdk-java.git\n\n\nChange directory: \ncd wpw-sdk-java\n\n\nRun \ngit submodule update --init --recursive\n\n\nThen build it with maven using the default goal: \nmvn\n\n\n\n\nRun the examples\n\n\nYou can try the examples by running them in two different console windows. Or, if you're installing on two separate devices, they must be one the same network that allows UDP broadcast traffic. Examples included in the repo are the sample projects: \nsample-consumer\n, \nsample-producer\n and \nsample-producer-callbacks\n. To run them you need to:\n\n\n\n\nIn the first window, run the consumer JAR.\n\n\ncd sample-producer-callbacks\n\n\njava -jar target/sample-producer-callbacks-\nversion\n-alpha.jar\n\n\n\n\n\n\nSimultaneously run the producer JAR.\n\n\ncd sample-consumer\n\n\njava -jar target/sample-consumer-\nversion\n-alpha.jar\n\n\n\n\n\n\nThe two smart devices should communicate with each other and make a payment.\n\n\n\n\nThe car-example and car-charger are Spring boot projects that start a webservice on \nlocalhost:80\n and \nlocalhost:8000\n. Those ports should be free if you want to run them. To run these examples you need to:\n\n\n\n\nIn the first window, run the car-example.\n\n\ncd car-example\n\n\njava -jar ./target/car-example-\nversion\n-alpha.jar\n\n\n\n\n\n\nSimultaneously run the car-charger.\n\n\ncd sample-consumer\n\n\njava -jar ./target/car-charger-\nversion\n-alpha.jar\n\n\n\n\n\n\nIn your browser, navigate to \nlocalhost:8000\n, open SmartCar UI page in one tab and Producer UI page. Set the battery level by touching the green bar and begin charging by pressing the \"Charge the battery\" button.\n\n\n\n\nCreating your own keys\n\n\nYou can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.\n\n\n\n\nWarning\n\n\nMake sure you only use test keys.\n\n\n\n\nTo add your own test API keys:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGo to \nSettings\n.\n\n\nThen click \nAPI Keys\n.\n\n\nGrab your \nService key\n and \nClient key\n. They'll look something like this: \nT_S_fd00db67-b77b-4d6e-1a2a-45f65123f795\n.\n\n\nFind the config folder of the SDK and find the producer JSON files.\n\n\nAdd your Service and Client keys:\n\n\nThe \npspConfig.merchant_client_key\n and \npspConfig.hte_public_key\n must have the same key.\n\n\nThe \npspConfig.merchant_service_key\n and \npspConfig.hte_private_key\n must have the same keys.\n\n\n\n\n\n\nSave your work.\n\n\n\n\nOnce you've added your own test keys, you'll be able to start testing your payments.\n\n\nSeeing your payments\n\n\nNow that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the \nRun the examples\n topic for more information about this.\n\n\nTo see your test payments:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nOn the homepage, scroll down to the \nRecent Orders\n section.\n\n\nYour payments are here. You'll be able to see:\n\n\nOrder Code\n - The order code\n\n\nCustomer Order Code\n - The customer's order code\n\n\nGross Amount\n - The gross amount of the order\n\n\nState\n - The state of the order. For example, SUCCESS or AUTHORIZED\n\n\nPayment type\n - The type of payment. For example, ECOM\n\n\nOrder type\n  - The type of order. For example, VISA_CREDIT or VISA_DEBIT\n\n\nUpdated\n - The last time the payment state changed\n\n\n\n\n\n\n\n\nFor more information, refer to the \nWorldpay Online documentation\n.\n\n\nDebugging\n\n\nIf you're having trouble, you can contact us at \nInnovation@Worldpay.com\n. Alternatively, you can \nraise an issue in GitHub\n.\n\n\nSo what's happening?\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases; \nDiscover\n, \nSelect\n, \nPay\n, and \nRelease\n. For more information, see \nHome\n.\n\n\nWhat IoT devices can I run this on?\n\n\n\n\nNote\n\n\nThe devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...\n\n\n\n\nWant to contribute?\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n.", 
            "title": "Java"
        }, 
        {
            "location": "/java/#prerequisites", 
            "text": "Before you get started:   Install Java JDK 1.8 on your systems.  Set the  JAVA_HOME  variable and make sure it points to your JDK installation directory.  If you do not have it, install  git .  Install  Apache Maven  and add it to PATH.  Create an account with  Worldpay Online  so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.    Warning  Make sure you only use test API keys.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/java/#get-started", 
            "text": "Clone the repository:  git clone https://github.com/WPTechInnovation/wpw-sdk-java.git  Change directory:  cd wpw-sdk-java  Run  git submodule update --init --recursive  Then build it with maven using the default goal:  mvn", 
            "title": "Get started"
        }, 
        {
            "location": "/java/#run-the-examples", 
            "text": "You can try the examples by running them in two different console windows. Or, if you're installing on two separate devices, they must be one the same network that allows UDP broadcast traffic. Examples included in the repo are the sample projects:  sample-consumer ,  sample-producer  and  sample-producer-callbacks . To run them you need to:   In the first window, run the consumer JAR.  cd sample-producer-callbacks  java -jar target/sample-producer-callbacks- version -alpha.jar    Simultaneously run the producer JAR.  cd sample-consumer  java -jar target/sample-consumer- version -alpha.jar    The two smart devices should communicate with each other and make a payment.   The car-example and car-charger are Spring boot projects that start a webservice on  localhost:80  and  localhost:8000 . Those ports should be free if you want to run them. To run these examples you need to:   In the first window, run the car-example.  cd car-example  java -jar ./target/car-example- version -alpha.jar    Simultaneously run the car-charger.  cd sample-consumer  java -jar ./target/car-charger- version -alpha.jar    In your browser, navigate to  localhost:8000 , open SmartCar UI page in one tab and Producer UI page. Set the battery level by touching the green bar and begin charging by pressing the \"Charge the battery\" button.", 
            "title": "Run the examples"
        }, 
        {
            "location": "/java/#creating-your-own-keys", 
            "text": "You can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.   Warning  Make sure you only use test keys.   To add your own test API keys:   Login to  Worldpay Online .  Go to  Settings .  Then click  API Keys .  Grab your  Service key  and  Client key . They'll look something like this:  T_S_fd00db67-b77b-4d6e-1a2a-45f65123f795 .  Find the config folder of the SDK and find the producer JSON files.  Add your Service and Client keys:  The  pspConfig.merchant_client_key  and  pspConfig.hte_public_key  must have the same key.  The  pspConfig.merchant_service_key  and  pspConfig.hte_private_key  must have the same keys.    Save your work.   Once you've added your own test keys, you'll be able to start testing your payments.", 
            "title": "Creating your own keys"
        }, 
        {
            "location": "/java/#seeing-your-payments", 
            "text": "Now that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the  Run the examples  topic for more information about this.  To see your test payments:   Login to  Worldpay Online .  On the homepage, scroll down to the  Recent Orders  section.  Your payments are here. You'll be able to see:  Order Code  - The order code  Customer Order Code  - The customer's order code  Gross Amount  - The gross amount of the order  State  - The state of the order. For example, SUCCESS or AUTHORIZED  Payment type  - The type of payment. For example, ECOM  Order type   - The type of order. For example, VISA_CREDIT or VISA_DEBIT  Updated  - The last time the payment state changed     For more information, refer to the  Worldpay Online documentation .", 
            "title": "Seeing your payments"
        }, 
        {
            "location": "/java/#debugging", 
            "text": "If you're having trouble, you can contact us at  Innovation@Worldpay.com . Alternatively, you can  raise an issue in GitHub .", 
            "title": "Debugging"
        }, 
        {
            "location": "/java/#so-whats-happening", 
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases;  Discover ,  Select ,  Pay , and  Release . For more information, see  Home .", 
            "title": "So what's happening?"
        }, 
        {
            "location": "/java/#what-iot-devices-can-i-run-this-on", 
            "text": "Note  The devices need to be on the same network - and that network should allow for UDP broadcast traffic. Most mobile hotspots allow this; a lot of corporate networks do not...", 
            "title": "What IoT devices can I run this on?"
        }, 
        {
            "location": "/java/#want-to-contribute", 
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com .", 
            "title": "Want to contribute?"
        }, 
        {
            "location": "/dotnet/", 
            "text": "The .NET implementation for the Worldpay Within IoT payment SDK. This SDK, or Software Development Kit, enables smart devices to discover each other, negogiate a price for services, make a payment (through the Worldpay Online Payment gateway) for services, and then consume services via a \ntrusted trigger\n. For an overview, see \nHome\n.\n\n\nYou can find the .NET repository \nhere\n.\n\n\nPrerequisites\n\n\nBefore you get started:\n\n\n\n\nInstall the Visual Studio 2017 (any edition) on your system. We've tested this wrapper with Visual 2017 Community Edition .NET (4.5+).\n\n\nIf you do not have it, install \ngit\n.\n\n\nCreate an account with \nWorldpay Online\n so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK. \n\n\n\n\n\n\nWarning\n\n\nMake sure you only use test API keys.\n\n\n\n\nGet Started\n\n\nThe \n.NET Worldpay Within SDK\n provides a convenient entry point for application developers who wish to create applications using the Worldpay Within SDK.\n\n\nCurrently, there are no \nNuGet\n published libraries for the SDK. This issue is being tracked in \nIssue #1 on GitHub\n.\n\n\nFor now you'll need to build the project yourself, by following these steps:\n\n\n\n\nClone or download the repository by typing \ngit clone https://github.com/WPTechInnovation/wpw-sdk-dotnet.git\n in a terminal or console. See the \nproject homepage\n on GitHub for more options.\n\n\nChange directory: \ncd wpw-sdk-dotnet\n\n\nUpdate the submodules: \ngit submodule update --init --recursive\n\n\nOpen the \nWorldpay.Within.sln\n project in Visual Studio 2017.\n\n\n\n\nRun the examples\n\n\nOnce you've loaded the projects in Visual Studio and built the project successfully (please note you can \nreport any problems or errors to us\n on Github), you're good to begin testing.\n\n\nTo run a sample app, run the \nWorldpay.Within.Sample\n project.\n\n\nWe'd recommend using your own test API keys for this. We've left ours in the code, so that it \"just works\", but you won't be able to see the payments with our keys unless you change them. For more information, refer to \nCreating your own keys\n below.\n\n\nThe sample application is a Windows console application. To make a simple payment, do the following:\n\n\n\n\nSelect option 1 \nStart Simple Producer\n. This will start a local RPC Agent and register a separate producer with it. Ths producer has a very simple service declaration.\n\n\nSelect option 3 \nConsume Purchase\n. This will start another RPC Agent and attempt to consume the first product of the first service it finds on the network (This will most likely be your producer).\n\n\n\n\nThe sample application produces lots of logging; you can control this by editing the \nApp.config\n file in the root of the sample project directory.\n\n\n Creating your own keys\n\n\nYou can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.\n\n\n\n\nWarning\n\n\nMake sure you only use test keys.\n\n\n\n\nTo add your own test API keys:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGo to \nSettings\n.\n\n\nThen click \nAPI Keys\n.\n\n\nGrab your \nService key\n and \nClient key\n. They'll look something like this: \nT_S_fd00db67-b77b-4d6e-1a2a-45f65123f795\n.\n\n\nFind the config folder of the SDK and find the producer JSON files.\n\n\nAdd your Service and Client keys:\n\n\nThe \npspConfig.merchant_client_key\n and \npspConfig.hte_public_key\n must have the same key.\n\n\nThe \npspConfig.merchant_service_key\n and \npspConfig.hte_private_key\n must have the same keys.\n\n\n\n\n\n\nSave your work.\n\n\n\n\nOnce you've added your own test keys, you'll be able to start testing your payments.\n\n\nSeeing your payments\n\n\nNow that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the \nRun the examples\n topic for more information about this.\n\n\nTo see your test payments:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nOn the homepage, scroll down to the \nRecent Orders\n section.\n\n\nYour payments are here. You'll be able to see:\n\n\nOrder Code\n - The order code\n\n\nCustomer Order Code\n - The customer's order code\n\n\nGross Amount\n - The gross amount of the order\n\n\nState\n - The state of the order. For example, SUCCESS or AUTHORIZED\n\n\nPayment type\n - The type of payment. For example, ECOM\n\n\nOrder type\n  - The type of order. For example, VISA_CREDIT or VISA_DEBIT\n\n\nUpdated\n - The last time the payment state changed\n\n\n\n\n\n\n\n\nFor more information, refer to the \nWorldpay Online documentation\n.\n\n\nSo what's happening?\n\n\n\n\nThe Worldpay Within Flows sequence diagram\n\n\nYou can see there are four phases; \nDiscover\n, \nSelect\n, \nPay\n, and \nRelease\n. For more information, see \nHome\n.\n\n\nIntroduction to the different .NET projects\n\n\nWorldpay.Within\n\n\nThis is the main .NET wrapper entry point assembly. The public API is contained inside the \nWorldpay.Within\n package.\n\n\nYou can use Sandcastle to build the docs, however they will be published online at some point (see \nIssue 2\n).\n\n\nWorldpay.Within.Rpc\n\n\nThis project contains nothing but the generated RPC wrappers for Thrift; you never edit code in here. This is a separate project because the style and organisation of the code generated by the Thrift compiler is pretty poor; this approach isolates this to a single project.\n\n\nTo rebuild the code, first delete all the existing source files and their directories. This clears out any existing code that may have been moved or removed in a new version. Then run the Thrift compiler:\n\n\nthrift-0.10.0.exe -r -out %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\wrappers\\dotnet\\Worldpay.Within\\Worldpay.Within.Rpc --gen csharp:nullable,union %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\rpc\\wpwithin.thrift\n\n\n\n\nThe \n-r\n is there just for safety, in case subdirectories are used in future for storing dependent Thrift IDL files.\n\n\n\n\nBe aware that the above paths assume that you have downloaded the \nWorldpay Within main SDK project\n in to a regular \"Go\" development structure. However, only the thrift interface files are actually required. You can grab those directly from \nhere\n. You need two files: \nwptypes.thrift\n and \nwpwithin.thrift\n - both files must be in the same directory.  They are not included within the .NET repository because they are centrally maintained and used to generate multiple language wrappers.\n\n\nBe sure to refresh the project source tree in Visual Studio to ensure that any newly generated files are included in the project. If you fail to do this, expect compile errors for missing types to be thrown.\n\n\nUsing in your own applications\n\n\nTo use Worldpay Within, add the following DLLs to your project path:\n\n\n\n\nWorldpay.Within.dll\n - this contains the SDK code and public entry points.\n\n\nWorldpay.Within.Rpc.dll\n - the Thrift compiler-generated code to bridge to the core Go SDK.\n\n\nThrift.dll\n - Apache Thrift library. \n\n\nLogging Framework\n - whatever logging framework we're going to use.\n\n\n\n\nTo run a Worldpay Within application, the Thrift RPC code will need to be able to talk to an RPC Agent. The RPC Agent is a standalone application that manages the communication with remote third parties (for example, if you are creating a Consumer then the SDK code communicates with a local RPC Agent using the Thrift protocol, which then talks via HTTP to a remote RPC Agent, which then talks to a local Producer via the Thrift protocol).\n\n\nWant to contribute?\n\n\nIf you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the \nInternal Structure of Worldpay Within\n and \nSample Service Messaging\n pages if you want to learn more about how Worldpay Within works.\n\n\nYou can also \nraise an issue in GitHub\n, or contact us directly at \nInnovation@Worldpay.com\n.", 
            "title": ".NET"
        }, 
        {
            "location": "/dotnet/#prerequisites", 
            "text": "Before you get started:   Install the Visual Studio 2017 (any edition) on your system. We've tested this wrapper with Visual 2017 Community Edition .NET (4.5+).  If you do not have it, install  git .  Create an account with  Worldpay Online  so that you can generate your own test API key. You'll replace the Worldpay test keys with your own in the SDK.     Warning  Make sure you only use test API keys.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/dotnet/#get-started", 
            "text": "The  .NET Worldpay Within SDK  provides a convenient entry point for application developers who wish to create applications using the Worldpay Within SDK.  Currently, there are no  NuGet  published libraries for the SDK. This issue is being tracked in  Issue #1 on GitHub .  For now you'll need to build the project yourself, by following these steps:   Clone or download the repository by typing  git clone https://github.com/WPTechInnovation/wpw-sdk-dotnet.git  in a terminal or console. See the  project homepage  on GitHub for more options.  Change directory:  cd wpw-sdk-dotnet  Update the submodules:  git submodule update --init --recursive  Open the  Worldpay.Within.sln  project in Visual Studio 2017.", 
            "title": "Get Started"
        }, 
        {
            "location": "/dotnet/#run-the-examples", 
            "text": "Once you've loaded the projects in Visual Studio and built the project successfully (please note you can  report any problems or errors to us  on Github), you're good to begin testing.  To run a sample app, run the  Worldpay.Within.Sample  project.  We'd recommend using your own test API keys for this. We've left ours in the code, so that it \"just works\", but you won't be able to see the payments with our keys unless you change them. For more information, refer to  Creating your own keys  below.  The sample application is a Windows console application. To make a simple payment, do the following:   Select option 1  Start Simple Producer . This will start a local RPC Agent and register a separate producer with it. Ths producer has a very simple service declaration.  Select option 3  Consume Purchase . This will start another RPC Agent and attempt to consume the first product of the first service it finds on the network (This will most likely be your producer).   The sample application produces lots of logging; you can control this by editing the  App.config  file in the root of the sample project directory.", 
            "title": "Run the examples"
        }, 
        {
            "location": "/dotnet/#seeing-your-payments", 
            "text": "Now that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the  Run the examples  topic for more information about this.  To see your test payments:   Login to  Worldpay Online .  On the homepage, scroll down to the  Recent Orders  section.  Your payments are here. You'll be able to see:  Order Code  - The order code  Customer Order Code  - The customer's order code  Gross Amount  - The gross amount of the order  State  - The state of the order. For example, SUCCESS or AUTHORIZED  Payment type  - The type of payment. For example, ECOM  Order type   - The type of order. For example, VISA_CREDIT or VISA_DEBIT  Updated  - The last time the payment state changed     For more information, refer to the  Worldpay Online documentation .", 
            "title": "Seeing your payments"
        }, 
        {
            "location": "/dotnet/#so-whats-happening", 
            "text": "The Worldpay Within Flows sequence diagram  You can see there are four phases;  Discover ,  Select ,  Pay , and  Release . For more information, see  Home .", 
            "title": "So what's happening?"
        }, 
        {
            "location": "/dotnet/#introduction-to-the-different-net-projects", 
            "text": "", 
            "title": "Introduction to the different .NET projects"
        }, 
        {
            "location": "/dotnet/#worldpaywithin", 
            "text": "This is the main .NET wrapper entry point assembly. The public API is contained inside the  Worldpay.Within  package.  You can use Sandcastle to build the docs, however they will be published online at some point (see  Issue 2 ).", 
            "title": "Worldpay.Within"
        }, 
        {
            "location": "/dotnet/#worldpaywithinrpc", 
            "text": "This project contains nothing but the generated RPC wrappers for Thrift; you never edit code in here. This is a separate project because the style and organisation of the code generated by the Thrift compiler is pretty poor; this approach isolates this to a single project.  To rebuild the code, first delete all the existing source files and their directories. This clears out any existing code that may have been moved or removed in a new version. Then run the Thrift compiler:  thrift-0.10.0.exe -r -out %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\wrappers\\dotnet\\Worldpay.Within\\Worldpay.Within.Rpc --gen csharp:nullable,union %GOPATH%\\src\\innovation.worldpay.com\\worldpay-within-sdk\\rpc\\wpwithin.thrift   The  -r  is there just for safety, in case subdirectories are used in future for storing dependent Thrift IDL files.   Be aware that the above paths assume that you have downloaded the  Worldpay Within main SDK project  in to a regular \"Go\" development structure. However, only the thrift interface files are actually required. You can grab those directly from  here . You need two files:  wptypes.thrift  and  wpwithin.thrift  - both files must be in the same directory.  They are not included within the .NET repository because they are centrally maintained and used to generate multiple language wrappers.  Be sure to refresh the project source tree in Visual Studio to ensure that any newly generated files are included in the project. If you fail to do this, expect compile errors for missing types to be thrown.", 
            "title": "Worldpay.Within.Rpc"
        }, 
        {
            "location": "/dotnet/#using-in-your-own-applications", 
            "text": "To use Worldpay Within, add the following DLLs to your project path:   Worldpay.Within.dll  - this contains the SDK code and public entry points.  Worldpay.Within.Rpc.dll  - the Thrift compiler-generated code to bridge to the core Go SDK.  Thrift.dll  - Apache Thrift library.   Logging Framework  - whatever logging framework we're going to use.   To run a Worldpay Within application, the Thrift RPC code will need to be able to talk to an RPC Agent. The RPC Agent is a standalone application that manages the communication with remote third parties (for example, if you are creating a Consumer then the SDK code communicates with a local RPC Agent using the Thrift protocol, which then talks via HTTP to a remote RPC Agent, which then talks to a local Producer via the Thrift protocol).", 
            "title": "Using in your own applications"
        }, 
        {
            "location": "/dotnet/#want-to-contribute", 
            "text": "If you want to contribute, clone the repository and create a branch. Once you've made your changes, create a pull request. We'll review your code, and if accepted it will be merged into the code base. It's worth checking out the  Internal Structure of Worldpay Within  and  Sample Service Messaging  pages if you want to learn more about how Worldpay Within works.  You can also  raise an issue in GitHub , or contact us directly at  Innovation@Worldpay.com .", 
            "title": "Want to contribute?"
        }, 
        {
            "location": "/getting-started-with-go/", 
            "text": "Getting started with Go\n\n\nTo code against the raw Go SDK, you'll need to install Go and the Golang SDK. Alternatively, you can code against one of the multiple language wrappers, which give access to the SDK. You can find the Go SDK \nhere\n.\n\n\nThe Golang SDK communicates with these other languages using RPC calls (in both directions), and the wrappers in the background interface using Thrift. This is not exposed to you as a developer; you work with the Interface layer in your language of choice. We've got SDKs in the following languages:\n\n\n  \nNode.js\n\n  \nPython\n\n  \nJava\n\n  \n.NET\n\n\n\n\nWorking with Go source files\n\n\nPrerequisites\n\n\n\n\nInstall the newest \nGo command line\n.\n\n\nIf you do not have it, install \ngit\n.\n\n\n\n\nGet started\n\n\n\n\nCreate a $GOPATH environment variable: (for example, on unix do: \nexport GOPATH=/home/pi/go\n).\n\n\nGet Apache Thrift and use the 0.10.0 branch:\n        a.  \ngo get git.apache.org/thrift.git/lib/go/thrift/...\n\n        b.  \ncd $GOPATH/src/git.apache.org/thrift.git\n\n        c.  \ngit checkout 0.10.0\n\n\nGet the SDK: \ngo get github.com/WPTechInnovaion/wpw-sdk-go/...\n\n\n\n\n\n\nNote\n\n\nMake sure you ignore the rpio.go system-specific warnings.\n\n\n\n\nRunning the examples\n\n\nNow you've got everything set up, you're able to build the examples inside: \n$GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/example\n\nEach example consists of a sample producer and a sample consumer:\n\n\n\n\n$GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-consumer\n\n\n$GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-producer-callbacks\n\n\n\n\nTo test the communication, build and run the producer:\n\n\n\n\ncd $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-producer-callbacks\n\n\ngo build\n\n\n./sample-producer-callbacks\n\n\n\n\nIn a separate terminal window, build and run the consumer:\n\n\n\n\ncd $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-consumer\n\n\ngo build\n\n\n./sample-consumer\n\n\n\n\n\n\nThe output of the log files for the orchestration of the flow.\n\n\n\n\nShowing the payment in online.worldpay.com.\n\n\nCreating your own keys\n\n\nYou can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.\n\n\n\n\nWarning\n\n\nMake sure you only use test keys.\n\n\n\n\nTo add your own test API keys:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nGo to \nSettings\n.\n\n\nThen click \nAPI Keys\n.\n\n\nGrab your \nService key\n and \nClient key\n. They'll look something like this: \nT_S_fd00db67-b77b-4d6e-1a2a-45f65123f795\n.\n\n\nFind the config folder of the SDK and find the producer JSON files.\n\n\nAdd your Service and Client keys:\n\n\nThe \npspConfig.merchant_client_key\n and \npspConfig.hte_public_key\n must have the same key.\n\n\nThe \npspConfig.merchant_service_key\n and \npspConfig.hte_private_key\n must have the same keys.\n\n\n\n\n\n\nSave your work.\n\n\n\n\nOnce you've added your own test keys, you'll be able to start testing your payments.\n\n\nSeeing your payments\n\n\nNow that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the \nRun the examples\n topic for more information about this.\n\n\nTo see your test payments:\n\n\n\n\nLogin to \nWorldpay Online\n.\n\n\nOn the homepage, scroll down to the \nRecent Orders\n section.\n\n\nYour payments are here. You'll be able to see:\n\n\nOrder Code\n - The order code\n\n\nCustomer Order Code\n - The customer's order code\n\n\nGross Amount\n - The gross amount of the order\n\n\nState\n - The state of the order. For example, SUCCESS or AUTHORIZED\n\n\nPayment type\n - The type of payment. For example, ECOM\n\n\nOrder type\n  - The type of order. For example, VISA_CREDIT or VISA_DEBIT\n\n\nUpdated\n - The last time the payment state changed\n\n\n\n\n\n\n\n\nFor more information, refer to the \nWorldpay Online documentation\n.\n\n\nDebugging\n\n\nIf you're having trouble, you can contact us at \nInnovation@Worldpay.com\n. Alternatively, you can \nraise an issue in GitHub\n.", 
            "title": "Go"
        }, 
        {
            "location": "/getting-started-with-go/#getting-started-with-go", 
            "text": "To code against the raw Go SDK, you'll need to install Go and the Golang SDK. Alternatively, you can code against one of the multiple language wrappers, which give access to the SDK. You can find the Go SDK  here .  The Golang SDK communicates with these other languages using RPC calls (in both directions), and the wrappers in the background interface using Thrift. This is not exposed to you as a developer; you work with the Interface layer in your language of choice. We've got SDKs in the following languages: \n   Node.js \n   Python \n   Java \n   .NET", 
            "title": "Getting started with Go"
        }, 
        {
            "location": "/getting-started-with-go/#working-with-go-source-files", 
            "text": "", 
            "title": "Working with Go source files"
        }, 
        {
            "location": "/getting-started-with-go/#prerequisites", 
            "text": "Install the newest  Go command line .  If you do not have it, install  git .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/getting-started-with-go/#get-started", 
            "text": "Create a $GOPATH environment variable: (for example, on unix do:  export GOPATH=/home/pi/go ).  Get Apache Thrift and use the 0.10.0 branch:\n        a.   go get git.apache.org/thrift.git/lib/go/thrift/... \n        b.   cd $GOPATH/src/git.apache.org/thrift.git \n        c.   git checkout 0.10.0  Get the SDK:  go get github.com/WPTechInnovaion/wpw-sdk-go/...    Note  Make sure you ignore the rpio.go system-specific warnings.", 
            "title": "Get started"
        }, 
        {
            "location": "/getting-started-with-go/#running-the-examples", 
            "text": "Now you've got everything set up, you're able to build the examples inside:  $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/example \nEach example consists of a sample producer and a sample consumer:   $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-consumer  $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-producer-callbacks   To test the communication, build and run the producer:   cd $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-producer-callbacks  go build  ./sample-producer-callbacks   In a separate terminal window, build and run the consumer:   cd $GOPATH/src/github.com/WPTechInnovation/wpw-sdk-go/examples/sample-consumer  go build  ./sample-consumer    The output of the log files for the orchestration of the flow.   Showing the payment in online.worldpay.com.", 
            "title": "Running the examples"
        }, 
        {
            "location": "/getting-started-with-go/#creating-your-own-keys", 
            "text": "You can do this whenever you want, but you're going to need to create your own API keys. These keys allow you to simulate payments and see the outcome, rather than just using the keys Worldpay included in their SDKs.   Warning  Make sure you only use test keys.   To add your own test API keys:   Login to  Worldpay Online .  Go to  Settings .  Then click  API Keys .  Grab your  Service key  and  Client key . They'll look something like this:  T_S_fd00db67-b77b-4d6e-1a2a-45f65123f795 .  Find the config folder of the SDK and find the producer JSON files.  Add your Service and Client keys:  The  pspConfig.merchant_client_key  and  pspConfig.hte_public_key  must have the same key.  The  pspConfig.merchant_service_key  and  pspConfig.hte_private_key  must have the same keys.    Save your work.   Once you've added your own test keys, you'll be able to start testing your payments.", 
            "title": "Creating your own keys"
        }, 
        {
            "location": "/getting-started-with-go/#seeing-your-payments", 
            "text": "Now that you've added your own test keys to the producer config files, you can start testing your payments. Refer to the  Run the examples  topic for more information about this.  To see your test payments:   Login to  Worldpay Online .  On the homepage, scroll down to the  Recent Orders  section.  Your payments are here. You'll be able to see:  Order Code  - The order code  Customer Order Code  - The customer's order code  Gross Amount  - The gross amount of the order  State  - The state of the order. For example, SUCCESS or AUTHORIZED  Payment type  - The type of payment. For example, ECOM  Order type   - The type of order. For example, VISA_CREDIT or VISA_DEBIT  Updated  - The last time the payment state changed     For more information, refer to the  Worldpay Online documentation .", 
            "title": "Seeing your payments"
        }, 
        {
            "location": "/getting-started-with-go/#debugging", 
            "text": "If you're having trouble, you can contact us at  Innovation@Worldpay.com . Alternatively, you can  raise an issue in GitHub .", 
            "title": "Debugging"
        }, 
        {
            "location": "/how-it-works/", 
            "text": "1. Understand the flows\n\n\nBefore you start it's worth familiarising yourself with how Worldpay Within works. We recommend following the pre-established flows in the order they are presented for each Thing (Consumer thing and producer thing). If you stray from the flows, we cannot guarantee that the SDKs will work.\n\n\nThe devices are not synchronised by the SDK, so you'll need to ensure that the SDKs call the Worldpay Within API in the correct order. If you follow the steps below, then the outcome should be as expected.\n\n\nWorldpay Within flow\n\n\nThe Consumer (Shopper) flow\n\n\nThe consumer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.\n\n\n\n\nThe consumer flow.\n\n\nThe Producer (Merchant) flow\n\n\nThe producer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.\n\n\n\n\nThe producer flow.\n\n\n2. Choose your SDK\n\n\nFor the alpha release, we decided to go with five languages. The documentation and API specification can be found here:\n\n\n  \nNode.js\n\n  \nPython\n\n  \nJava\n\n  \n.NET\n\n  \nGo", 
            "title": "How it works"
        }, 
        {
            "location": "/how-it-works/#146-understand-the-flows", 
            "text": "Before you start it's worth familiarising yourself with how Worldpay Within works. We recommend following the pre-established flows in the order they are presented for each Thing (Consumer thing and producer thing). If you stray from the flows, we cannot guarantee that the SDKs will work.  The devices are not synchronised by the SDK, so you'll need to ensure that the SDKs call the Worldpay Within API in the correct order. If you follow the steps below, then the outcome should be as expected.", 
            "title": "1. Understand the flows"
        }, 
        {
            "location": "/how-it-works/#worldpay-within-flow", 
            "text": "", 
            "title": "Worldpay Within flow"
        }, 
        {
            "location": "/how-it-works/#the-consumer-shopper-flow", 
            "text": "The consumer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.   The consumer flow.", 
            "title": "The Consumer (Shopper) flow"
        }, 
        {
            "location": "/how-it-works/#the-producer-merchant-flow", 
            "text": "The producer device should follow this flow. These steps should map to the interface either in Go, or in your chosen SDK wrapper.   The producer flow.", 
            "title": "The Producer (Merchant) flow"
        }, 
        {
            "location": "/how-it-works/#246-choose-your-sdk", 
            "text": "For the alpha release, we decided to go with five languages. The documentation and API specification can be found here: \n   Node.js \n   Python \n   Java \n   .NET \n   Go", 
            "title": "2. Choose your SDK"
        }, 
        {
            "location": "/architecture/", 
            "text": "To complement the architecture we've released the Worldpay Within SDK. The intention for the SDK is to encapsulate implementation and help third party vendors and developers integrate into their Internet of Things (IoT) solutions.\n\n\nThe core of the SDK is developed in the Go programming language with wrappers created for \nJava\n, \nNode.js\n, \nPython\n and \n.NET\n. Service delivery and broadcast have been implemented using TCP/IP networking.\n\n\nFor more information about the low level service messaging, click \nhere\n.\n\n\nArchitecture Overview\n\n\nIn the IoT, each Thing will perform the function it is designed for, be it acting as a sensor, a controller or both. In order for the Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.\n\n\n\n\nFigure 1. Worldpay Within Pluggable agent.\n\n\nThings in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.\n\n\n\n\nFigure 2. Worldpay Within Logical Overview.\n\n\nIn order to make and receive payments in the IoT, a Thing must be able to perform the roles of consumer (shopper), to make a payment for services, and the producer (merchant), to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d or \"producer\" receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both HCE Brain and HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.\n\n\nDuring the payments process, HCE and HTE require the secure storage and use of credentials. This requires the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d. For HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions with Worldpay.\n\n\nAs well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.\n\n\nWorldpay Within IoT Service Architecture\n\n\nThe provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 3. These are:  \nDiscover\n, \nSelect\n, \nPay\n, and \nRelease\n. Each of these phases are described in the following sections.\n\n\n\n\nFigure 3. The 4 phases of Worldpay Within.\n\n\nDiscover\n\n\nFor each Thing that offers services, the service \u2018producer\u2019 shall broadcast its list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018producer\u2019, it can request details of the services offered.\n\n\nProviding a suitable service is discovered, the consumer then requests the service from the producer, and price negotiations can begin.\n\n\n\n\nFigure 4. IoT Service discovery.\n\n\nService Discovery APIs\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender.\n\n\n\n\n\n\nrequest services\n\n\nnone\n\n\nRequest a list of all services.\n\n\n\n\n\n\nservices_response\n\n\nlist of services\n, \nserver_UUID\n\n\nProvide client with a list of possible services that the sender can provide.\n\n\n\n\n\n\n\n\nService discovery messages\n\n\nA broadcast message that includes \nThing B\n\u2019s UUID is sent.\n\n\nUpon receiving the message, \nThing A\n connects to \nThing B\n and requests the list of available services.\n\n\nThing B\n responds with a list identifying the services available.\n\n\nSelect\n\n\nOnce a suitable service has been discovered, the shopper will make the choice. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.\n\n\n\n\nFigure 5. IoT Service Negotiation.\n\n\nService selection APIs\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nprice_request\n\n\nservice_id\n\n\nRequest a list of all prices for a given service.\n\n\n\n\n\n\nprice_response\n\n\nserver_UUID\n, list of prices, (\nservice_id\n, \nprice_id\n, \nprice_per_unit\n, \nunit_ID\n, \nunit_description\n, \nprice_description\n)\n\n\nProvide the client with a list of prices for a given service. A price object contains the per unit price.\n\n\n\n\n\n\nprice_select\n\n\nservice_id\n, \nprice_id\n, \nnumber_of_units\n, \nclient_UUID\n\n\nSelect a price with \nprice_id\n, for \nservice_id\n for a number of units.\n\n\n\n\n\n\nprice_select_response\n\n\nprice_id\n, \nnumber_of_units\n, \ntotal_price\n, \nserver_UUID\n, \nclient_UUID\n, \npayment_ref_ID\n, \nMerchant_Client_key\n\n\nCommunicate the expected total price to the client.\n\n\n\n\n\n\n\n\nService selection messages\n\n\nA price request is sent containing the selected \nservice_id\n.\n\n\nThe response from \nThing B\n contains a list of price items; each item should contain a \nprice_id\n, per unit price, \nunit_ID\n and \ndescription\n fields of both the unit and the price.\n\n\nThing A\n then selects an appropriate \nprice_id\n by sending a request with its \nclient_UUID\n, the selected \nservice_id\n, the \nprice_id\n, and the number of items required.\n\n\nIf the number of items falls within the correct number of items for the price selected, then \nThing B\n responds with a price select response containing the \nservice_id\n, \nprice_id\n, the total price, the \nservice_UUID\n and a reference for the payment and its Merchant Client key. Otherwise, \nThing B\n shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.\n\n\nPay\n\n\nThe payment process with Worldpay is a two stage process, split between the consumer and merchant Things involved in the transaction:\n\n\n\n\nClient Token Request\n\n\nPayment Authorisation Request (Also known as Order Request)\n\n\n\n\nDuring the first stage, the consumer sends Worldpay their payment credentials and the merchants Client Key. We return a Client Token, which the consumer passes to the Merchant. This allows the merchant to perform the payment authorisation request with Worldpay by providing the Client Token and transaction details.\n\n\nThis payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Worldpay.\n\n\nClient token request\n\n\nThe first step in the payment process is when \nThing A\n receives the \nMerchant_Client_Key\n from \nThing B\n. \nThing B\n passes their public Client Key to \nThing A\n as part of the \nprice_select_response\n during the Service Negotiation phase. Upon receiving the Client Key from \nThing B\n, \nThing A\n connects with Worldpay to request the client token from us. This request includes \nThing A\n\u2019s payment credentials: Card PAN, expiry, and the \nclient_key\n of \nThing B\n. Worldpay will respond with a message that includes a \nclient_token\n. This is shown in Figure 6.\n\n\n\n\nFigure 6. IoT Payment process - client token request.\n\n\nClient token request APIs\n\n\nThing A to Worldpay client token request\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nclient_token_request\n\n\nPayment_method\n, \nreusable_flag\n, \nMerchant_client_key\n, \nPayment_method\n (\nname\n, \nPAN\n, \nexpiryMonth\n, \nexpiryYear\n, \ntype\n)\n\n\nRequest a client token from Worldpay, whilst providing us with the payment credentials.\n\n\n\n\n\n\nclient_token_response\n\n\nclient_token\n, \nreusable_flag\n, \npayment_method_response\n (\ntype\n, \nname\n, \nexpiryMonth\n, \nexpiryYear\n, \ncard_type\n, \ncard_scheme\\_type\n, \ncard_scheme_name\n, \nmasked_card_number\n, \ncard_product_type_description_non_contactless\n, \ncard_product_type_description_contactless\n, \ncard_issuer\n, \ncountry_code\n, \ncard_class\n, \npre-paid\n)\n\n\nResponse from Worldpay containing the client_token.\n\n\n\n\n\n\nPayment_request\n\n\nclient_token\n, \nclient_UUID\n, \npayment_ref_ID\n\n\nThe \nclient_token\n is passed to Thing B to allow the 2\nnd\n part of the transaction process to take place.\n\n\n\n\n\n\n\n\nThing A\n will connect to Worldpay using Transport Layer Security (TLS). It will then request a \nclient_token\n by securely (see 2.2.1) sending a JSON message containing the \npaymentMethod\n, its payment credentials (PAN, expiry) to us, along with the \nclient_key\n from \nThing B\n. In addition, a flag indicating if the client details can be used in future is sent. For IoT this should always be set \n\u2018reusable\u2019:\u2019false\u2019\n in order to force the generation of a new client token for each transaction.\n\n\nA successful response will be an HTTP \nPOST\n response containing fields: \nclient_token\n, \nreusable_flag\n and the \npayment_method_response\n. Once received, the \nclient_token\n is passed to \nThing B\n.\n\n\nA sample request is shown in \nSample Service Messaging\n.\n\n\nSee \nAPI keys\n for documentation on \nclient_token_request\n and \nclient_token_repsonse\n APIs data descriptions.\n\n\nPayment authorisation request\n\n\nThing B\n will process the order and request the payment from Worldpay providing its service key, \nclient_token\n, transaction currency and payment amount. This is transmitted to Worldpay over TLS. After successfully processing the payment, Worldpay will provide a payment response. \nThing B\n shall then generate a service token, which \nThing A\n may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.\n\n\n\n\nFigure 7. Payment Authorisation Request.\n\n\nPayment authorisation request APIs\n\n\nThing B to Worldpay payment authorisation request\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\norder_request\n\n\nclient_service_key\n, \nclient_token\n, \ncurrency_code\n, \namount\n, \norder_description\n, \ncustomer_order_code\n\n\nRequest payment from Worldpay.\n\n\n\n\n\n\norder_response\n\n\norder_code\n, \nclient_token\n, \norder_description\n, \namount\n, \ncurrency_code\n, \npayment_status\n, \ncustomer_order_code\n, \nenvironment\n, \nrisk_score\n, \npayment_response\n (\ntype\n, \nname\n, \nexpiryMonth\n, \nexpiryYear\n, \ncard_type\n, \ncard_scheme_type\n, \ncard_scheme_name\n, \nmasked_card_number\n, \ncard_product_type_description_non_contactless\n, \ncard_product_type_description_contactless\n, \ncard_issuer\n, \ncountry_code\n, \ncard_class\n, \npre-paid\n)\n\n\nPayment response indicating a successful transaction on the Worldpay platform.\n\n\n\n\n\n\n\n\nThing B\n will assemble a message to be posted to Worldpay that contains the client token, Service key, the amount, currency and transaction description. We will then perform an authorisation using the payment credentials identified by the \nclient_token\n. A successful authorisation will result in a \npayment_status\n of SUCCESS being returned to \nThing B\n.\n\n\nThing B to Thing A service token\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token\n, \nserver_UUID\n, \nclient_UUID\n, \ntotal_paid\n\n\nservice_delivery_token\n is passed to Thing B.\n\n\n\n\n\n\n\n\nThing B\n shall then generate a cryptographically secure \nservice_delivery_token\n, which can be used by \nThing A\n to request provision of services from \nThing B\n.\n\n\nDelivery\n\n\nOnce the payment has been made, \nThing B\n shall return to broadcasting its available services. \nThing A\n will now be able to consume the service from \nThing B\n by providing the \nservice_delivery_token\n. The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.\n\n\n\n\nFigure 8. Service delivery.\n\n\nOnce in possession of a \nservice_token\n, \nThing A\n may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased. \nThing A\n may repeatedly send service delivery requests until \nThing B\n indicates that the service has been delivered.\n\n\nService Delivery APIs\n\n\n\n\n\n\n\n\nKey\n\n\nParameters\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\npayment_request_response\n\n\nservice_delivery_token\n, \nserver_UUID\n, \nclient_UUID\n, \ntotal_paid\n\n\nservice_delivery_token\n is passed to Thing B.\n\n\n\n\n\n\nbroadcast\n\n\nserver_UUID\n\n\nAdvertising services and identifying the sender.\n\n\n\n\n\n\ndelivery_begin_request\n\n\nservice_delivery_token\n, \nclient_UUID\n, \nnumber_of_units_to_supply\n\n\nRequest the service item, with the \nservice_delivery_token\n providing right to receive the service, and amount of service to be supplied.\n\n\n\n\n\n\ndelivery_begin_response\n\n\nserver_UUID\n, \nservice_delivery_token\n, \nclient_UUID\n, \nnumber_of_units_to_be_supplied\n\n\nResponse for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).\n\n\n\n\n\n\ndelivery_end\n\n\nclient_UUID\n, \nnumber_of_units_received\n\n\nConfirmation of service received.\n\n\n\n\n\n\ndelivery_end_response\n\n\nserver_UUID\n, \nservice_delivery_token\n, \nclient_UUID\n, \nnumber_of_units_just_supplied\n, \nnumber_of_units_remaining\n\n\nService end indicating outstanding service credits and token for subsequent delivery.\n\n\n\n\n\n\n\n\nThing\n A sends a message with the \nservice_delivery_token\n to \nThing B\n, along with the amount of service it wishes to consume. The response shall confirm the amount of service units that \nThing B\n can supply to \nThing A\n at that time. Once the service has been delivered, \nThing A\n shall confirm the amount of service units it has received, with \nThing B\n responding, stating the number of units still remaining to \nThing A\n, if any.", 
            "title": "Architecture"
        }, 
        {
            "location": "/architecture/#architecture-overview", 
            "text": "In the IoT, each Thing will perform the function it is designed for, be it acting as a sensor, a controller or both. In order for the Thing to be able to make and receive payments for services they can provide to other Things, they need to add the payments functionality contained in Worldpay Within.   Figure 1. Worldpay Within Pluggable agent.  Things in the IoT will be implemented on dedicated low cost processor systems. The Thing and Worldpay Within must co-exist and operate on the resources provided by these devices, as demonstrated in Figure 2.   Figure 2. Worldpay Within Logical Overview.  In order to make and receive payments in the IoT, a Thing must be able to perform the roles of consumer (shopper), to make a payment for services, and the producer (merchant), to receive a payment for provision of services. In the Worldpay Within IoT architecture, the \u201cconsumer\u201d pays for services by supporting Host Card Emulation (HCE). The \u201cmerchant\u201d or \"producer\" receives payments for services by supporting Host Terminal Emulation (HTE). Worldpay Within contains both HCE Brain and HTE Brain functionalities, ensuring a Thing can both consume and supply services. These services are provided through a series of public APIs, described within this document.  During the payments process, HCE and HTE require the secure storage and use of credentials. This requires the use of secure processing within the Thing in a \u201cSecure Execution Environment\u201d. For HCE Things, these credentials include the details of the \u201ccard\u201d which the payment will be made from. For HTE Things, these credentials include the details the Merchant requires to perform transactions with Worldpay.  As well as the provision of the payment for the services, Worldpay Within provides for the generation and validation of secure service tokens, which allow for services to be consumed in part or together, but separately from the payments functionality.", 
            "title": "Architecture Overview"
        }, 
        {
            "location": "/architecture/#worldpay-within-iot-service-architecture", 
            "text": "The provision of a service within the Worldpay IoT system is performed in 4 phases, as shown in Figure 3. These are:   Discover ,  Select ,  Pay , and  Release . Each of these phases are described in the following sections.   Figure 3. The 4 phases of Worldpay Within.", 
            "title": "Worldpay Within IoT Service Architecture"
        }, 
        {
            "location": "/architecture/#discover", 
            "text": "For each Thing that offers services, the service \u2018producer\u2019 shall broadcast its list of available services, as shown in Figure 4 below. When a potential \u2018consumer\u2019 of the service connects with \u2018producer\u2019, it can request details of the services offered.  Providing a suitable service is discovered, the consumer then requests the service from the producer, and price negotiations can begin.   Figure 4. IoT Service discovery.", 
            "title": "Discover"
        }, 
        {
            "location": "/architecture/#service-discovery-apis", 
            "text": "Key  Parameters  Purpose      broadcast  server_UUID  Advertising services and identifying the sender.    request services  none  Request a list of all services.    services_response  list of services ,  server_UUID  Provide client with a list of possible services that the sender can provide.", 
            "title": "Service Discovery APIs"
        }, 
        {
            "location": "/architecture/#service-discovery-messages", 
            "text": "A broadcast message that includes  Thing B \u2019s UUID is sent.  Upon receiving the message,  Thing A  connects to  Thing B  and requests the list of available services.  Thing B  responds with a list identifying the services available.", 
            "title": "Service discovery messages"
        }, 
        {
            "location": "/architecture/#select", 
            "text": "Once a suitable service has been discovered, the shopper will make the choice. The provider may offer the same service at different rates depending on the number of units of service to be purchased. The process is outlined in Figure 5. The outcome of the process is an agreement to purchase an amount of service and a total price for the service to be provided. The service provider can then request payment for the agreed service and price.   Figure 5. IoT Service Negotiation.", 
            "title": "Select"
        }, 
        {
            "location": "/architecture/#service-selection-apis", 
            "text": "Key  Parameters  Purpose      price_request  service_id  Request a list of all prices for a given service.    price_response  server_UUID , list of prices, ( service_id ,  price_id ,  price_per_unit ,  unit_ID ,  unit_description ,  price_description )  Provide the client with a list of prices for a given service. A price object contains the per unit price.    price_select  service_id ,  price_id ,  number_of_units ,  client_UUID  Select a price with  price_id , for  service_id  for a number of units.    price_select_response  price_id ,  number_of_units ,  total_price ,  server_UUID ,  client_UUID ,  payment_ref_ID ,  Merchant_Client_key  Communicate the expected total price to the client.", 
            "title": "Service selection APIs"
        }, 
        {
            "location": "/architecture/#service-selection-messages", 
            "text": "A price request is sent containing the selected  service_id .  The response from  Thing B  contains a list of price items; each item should contain a  price_id , per unit price,  unit_ID  and  description  fields of both the unit and the price.  Thing A  then selects an appropriate  price_id  by sending a request with its  client_UUID , the selected  service_id , the  price_id , and the number of items required.  If the number of items falls within the correct number of items for the price selected, then  Thing B  responds with a price select response containing the  service_id ,  price_id , the total price, the  service_UUID  and a reference for the payment and its Merchant Client key. Otherwise,  Thing B  shall return the number of units it can supply along with the correct price, and additional details required to initiate the payment.", 
            "title": "Service selection messages"
        }, 
        {
            "location": "/architecture/#pay", 
            "text": "The payment process with Worldpay is a two stage process, split between the consumer and merchant Things involved in the transaction:   Client Token Request  Payment Authorisation Request (Also known as Order Request)   During the first stage, the consumer sends Worldpay their payment credentials and the merchants Client Key. We return a Client Token, which the consumer passes to the Merchant. This allows the merchant to perform the payment authorisation request with Worldpay by providing the Client Token and transaction details.  This payment process ensures that the consumer does not pass their payment credentials to the merchant, only to Worldpay.", 
            "title": "Pay"
        }, 
        {
            "location": "/architecture/#client-token-request", 
            "text": "The first step in the payment process is when  Thing A  receives the  Merchant_Client_Key  from  Thing B .  Thing B  passes their public Client Key to  Thing A  as part of the  price_select_response  during the Service Negotiation phase. Upon receiving the Client Key from  Thing B ,  Thing A  connects with Worldpay to request the client token from us. This request includes  Thing A \u2019s payment credentials: Card PAN, expiry, and the  client_key  of  Thing B . Worldpay will respond with a message that includes a  client_token . This is shown in Figure 6.   Figure 6. IoT Payment process - client token request.", 
            "title": "Client token request"
        }, 
        {
            "location": "/architecture/#client-token-request-apis", 
            "text": "", 
            "title": "Client token request APIs"
        }, 
        {
            "location": "/architecture/#thing-a-to-worldpay-client-token-request", 
            "text": "Key  Parameters  Purpose      client_token_request  Payment_method ,  reusable_flag ,  Merchant_client_key ,  Payment_method  ( name ,  PAN ,  expiryMonth ,  expiryYear ,  type )  Request a client token from Worldpay, whilst providing us with the payment credentials.    client_token_response  client_token ,  reusable_flag ,  payment_method_response  ( type ,  name ,  expiryMonth ,  expiryYear ,  card_type ,  card_scheme\\_type ,  card_scheme_name ,  masked_card_number ,  card_product_type_description_non_contactless ,  card_product_type_description_contactless ,  card_issuer ,  country_code ,  card_class ,  pre-paid )  Response from Worldpay containing the client_token.    Payment_request  client_token ,  client_UUID ,  payment_ref_ID  The  client_token  is passed to Thing B to allow the 2 nd  part of the transaction process to take place.     Thing A  will connect to Worldpay using Transport Layer Security (TLS). It will then request a  client_token  by securely (see 2.2.1) sending a JSON message containing the  paymentMethod , its payment credentials (PAN, expiry) to us, along with the  client_key  from  Thing B . In addition, a flag indicating if the client details can be used in future is sent. For IoT this should always be set  \u2018reusable\u2019:\u2019false\u2019  in order to force the generation of a new client token for each transaction.  A successful response will be an HTTP  POST  response containing fields:  client_token ,  reusable_flag  and the  payment_method_response . Once received, the  client_token  is passed to  Thing B .  A sample request is shown in  Sample Service Messaging .  See  API keys  for documentation on  client_token_request  and  client_token_repsonse  APIs data descriptions.", 
            "title": "Thing A to Worldpay client token request"
        }, 
        {
            "location": "/architecture/#payment-authorisation-request", 
            "text": "Thing B  will process the order and request the payment from Worldpay providing its service key,  client_token , transaction currency and payment amount. This is transmitted to Worldpay over TLS. After successfully processing the payment, Worldpay will provide a payment response.  Thing B  shall then generate a service token, which  Thing A  may use in future to obtain the services that the payment has been made for. This is shown in Figure 7.   Figure 7. Payment Authorisation Request.", 
            "title": "Payment authorisation request"
        }, 
        {
            "location": "/architecture/#payment-authorisation-request-apis", 
            "text": "", 
            "title": "Payment authorisation request APIs"
        }, 
        {
            "location": "/architecture/#thing-b-to-worldpay-payment-authorisation-request", 
            "text": "Key  Parameters  Purpose      order_request  client_service_key ,  client_token ,  currency_code ,  amount ,  order_description ,  customer_order_code  Request payment from Worldpay.    order_response  order_code ,  client_token ,  order_description ,  amount ,  currency_code ,  payment_status ,  customer_order_code ,  environment ,  risk_score ,  payment_response  ( type ,  name ,  expiryMonth ,  expiryYear ,  card_type ,  card_scheme_type ,  card_scheme_name ,  masked_card_number ,  card_product_type_description_non_contactless ,  card_product_type_description_contactless ,  card_issuer ,  country_code ,  card_class ,  pre-paid )  Payment response indicating a successful transaction on the Worldpay platform.     Thing B  will assemble a message to be posted to Worldpay that contains the client token, Service key, the amount, currency and transaction description. We will then perform an authorisation using the payment credentials identified by the  client_token . A successful authorisation will result in a  payment_status  of SUCCESS being returned to  Thing B .", 
            "title": "Thing B to Worldpay payment authorisation request"
        }, 
        {
            "location": "/architecture/#thing-b-to-thing-a-service-token", 
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token ,  server_UUID ,  client_UUID ,  total_paid  service_delivery_token  is passed to Thing B.     Thing B  shall then generate a cryptographically secure  service_delivery_token , which can be used by  Thing A  to request provision of services from  Thing B .", 
            "title": "Thing B to Thing A service token"
        }, 
        {
            "location": "/architecture/#delivery", 
            "text": "Once the payment has been made,  Thing B  shall return to broadcasting its available services.  Thing A  will now be able to consume the service from  Thing B  by providing the  service_delivery_token . The service delivery may be in a single step, or over time. An overview of service delivery is shown in Figure 8.   Figure 8. Service delivery.  Once in possession of a  service_token ,  Thing A  may then request the service be provided. The service could be consumed in one session, or in several sessions over time, depending on the nature of the service and number of units purchased.  Thing A  may repeatedly send service delivery requests until  Thing B  indicates that the service has been delivered.", 
            "title": "Delivery"
        }, 
        {
            "location": "/architecture/#service-delivery-apis", 
            "text": "Key  Parameters  Purpose      payment_request_response  service_delivery_token ,  server_UUID ,  client_UUID ,  total_paid  service_delivery_token  is passed to Thing B.    broadcast  server_UUID  Advertising services and identifying the sender.    delivery_begin_request  service_delivery_token ,  client_UUID ,  number_of_units_to_supply  Request the service item, with the  service_delivery_token  providing right to receive the service, and amount of service to be supplied.    delivery_begin_response  server_UUID ,  service_delivery_token ,  client_UUID ,  number_of_units_to_be_supplied  Response for the service delivery. Confirmation of number of service units to be supplied (Allowing for less units than requested).    delivery_end  client_UUID ,  number_of_units_received  Confirmation of service received.    delivery_end_response  server_UUID ,  service_delivery_token ,  client_UUID ,  number_of_units_just_supplied ,  number_of_units_remaining  Service end indicating outstanding service credits and token for subsequent delivery.     Thing  A sends a message with the  service_delivery_token  to  Thing B , along with the amount of service it wishes to consume. The response shall confirm the amount of service units that  Thing B  can supply to  Thing A  at that time. Once the service has been delivered,  Thing A  shall confirm the amount of service units it has received, with  Thing B  responding, stating the number of units still remaining to  Thing A , if any.", 
            "title": "Service Delivery APIs"
        }, 
        {
            "location": "/internal-structure/", 
            "text": "What is Worldpay Within and what does it do\n\n\nWorldpay Within is an embeddable payments agent for the Internet of Things (IoT) that can be 'plugged' into your smart device app, enabling it to discover, pay for, and consume the services of other devices. Conversely it also allows your smart device to expose services to consumer devices, receive payments for those services, and then release services to a consumer using the idea of a \nTrusted Trigger\n.\n\n\nIt is all about enabling payments in IoT, allowing smart devices to communicate with each other and exchange value for services.\n\n\nConsumers and producers\n\n\nA consumer (shopper) is a smart device which is looking for services, pays for services and consumes services.\n\n\nA producer (merchant) is a smart device that is able to advertise availability of it's owner services to consumers, take a payment, and release those services to the trusted consumer that made the payment.\n\n\nHow could I use it?\n\n\n\n\nWhat Worldpay Within Does\n\n\nThe above example has a smart car looking for petrol and then paying for the service from the petrol station. The smart car \"wants petrol\", so has HCE (Host Card Emulation; card credentials), making it act as a Shopper. When trying to make a payment, it will connect to Worldpay and request tokenised card credentials based on the smart device it is trying to consume services from.\n\n\nThis token is then securely passed to the petrol pump. In this case the petrol station is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the Worldpay gateway to make a 'card on file' or 'eCommerce' payment authorisation request. With the payment authorised, the petrol station then releases the purchased service to the shopper.\n\n\nThe beauty of Worldpay Within is that it enables smart devices to both make \nand\n receive payments. In the example above, the petrol station could then go on to make payments to the oil company's smart hub which is providing the petrol.\n\n\nHow the Wrapper works\n\n\n\n\nHow the Wrapper Works.\n\n\nOn the left-hand side you have the SDK, on the right-hand side you have the Wrapper, in this case the Java Core. The SDK in Golang has an RPC layer on top which is exposed via Thrift. The Java Core or Wrapper, is built up of the Thrift layer which does the RPC comms to the core SDK. The wrapper also acts as an adapter converting all the data / objects / errors into Pojos that the Java core, or the app you are building can work with.\n\n\nThe important thing to recognise here is that none of the Thrift layer is exposed to you as a developer, and all the RPC calls are handled for you. Essentially you are calling Worldpay Within seamlessly, managed by the Worldpay Within Wrapper in the appropriate language you are working in.\n\n\nHow the wrapper and SDK work\n\n\n\n\nHow the wrapper and SDK work.\n\n\nThis is another view of the SDK and the app. In this scenario there are two devices with Worldpay Within installed on them that communicate over the internet. One is the 'consumer' and the other is the 'producer', as explained above. As you go down the layers, you have the RPC layer, then the Thrift layer and finally the wrapper layer (above). The wrapper communicates with the SDK via RPC calls. What is not shown is your app will be the next layer shown on the diagram.\n\n\nIn this scenario, the producer is UDP broadcasting a service message, which includes its hostname, IP and UrlPrefix. Once the consumer discovers the broadcast, it is able to communicate over HTTP with the RESTful endpoint on the producer to find out what services it offers. The shopper will then continue the rest of the flow.\n\n\nWhat's happening inside the SDK\n\n\nWe have open sourced the wrappers, example apps, and the Golang SDK. For an overview, see \nHome\n.\n\n\nClick \nhere\n for more information about the Worldpay Within architecture.", 
            "title": "Internal structure"
        }, 
        {
            "location": "/internal-structure/#what-is-worldpay-within-and-what-does-it-do", 
            "text": "Worldpay Within is an embeddable payments agent for the Internet of Things (IoT) that can be 'plugged' into your smart device app, enabling it to discover, pay for, and consume the services of other devices. Conversely it also allows your smart device to expose services to consumer devices, receive payments for those services, and then release services to a consumer using the idea of a  Trusted Trigger .  It is all about enabling payments in IoT, allowing smart devices to communicate with each other and exchange value for services.", 
            "title": "What is Worldpay Within and what does it do"
        }, 
        {
            "location": "/internal-structure/#consumers-and-producers", 
            "text": "A consumer (shopper) is a smart device which is looking for services, pays for services and consumes services.  A producer (merchant) is a smart device that is able to advertise availability of it's owner services to consumers, take a payment, and release those services to the trusted consumer that made the payment.", 
            "title": "Consumers and producers"
        }, 
        {
            "location": "/internal-structure/#how-could-i-use-it", 
            "text": "What Worldpay Within Does  The above example has a smart car looking for petrol and then paying for the service from the petrol station. The smart car \"wants petrol\", so has HCE (Host Card Emulation; card credentials), making it act as a Shopper. When trying to make a payment, it will connect to Worldpay and request tokenised card credentials based on the smart device it is trying to consume services from.  This token is then securely passed to the petrol pump. In this case the petrol station is the Producer, or is acting as the merchant, or HTE (Host Terminal Emulation, accepting payment), which then directly communicates with the Worldpay gateway to make a 'card on file' or 'eCommerce' payment authorisation request. With the payment authorised, the petrol station then releases the purchased service to the shopper.  The beauty of Worldpay Within is that it enables smart devices to both make  and  receive payments. In the example above, the petrol station could then go on to make payments to the oil company's smart hub which is providing the petrol.", 
            "title": "How could I use it?"
        }, 
        {
            "location": "/internal-structure/#how-the-wrapper-works", 
            "text": "How the Wrapper Works.  On the left-hand side you have the SDK, on the right-hand side you have the Wrapper, in this case the Java Core. The SDK in Golang has an RPC layer on top which is exposed via Thrift. The Java Core or Wrapper, is built up of the Thrift layer which does the RPC comms to the core SDK. The wrapper also acts as an adapter converting all the data / objects / errors into Pojos that the Java core, or the app you are building can work with.  The important thing to recognise here is that none of the Thrift layer is exposed to you as a developer, and all the RPC calls are handled for you. Essentially you are calling Worldpay Within seamlessly, managed by the Worldpay Within Wrapper in the appropriate language you are working in.", 
            "title": "How the Wrapper works"
        }, 
        {
            "location": "/internal-structure/#how-the-wrapper-and-sdk-work", 
            "text": "How the wrapper and SDK work.  This is another view of the SDK and the app. In this scenario there are two devices with Worldpay Within installed on them that communicate over the internet. One is the 'consumer' and the other is the 'producer', as explained above. As you go down the layers, you have the RPC layer, then the Thrift layer and finally the wrapper layer (above). The wrapper communicates with the SDK via RPC calls. What is not shown is your app will be the next layer shown on the diagram.  In this scenario, the producer is UDP broadcasting a service message, which includes its hostname, IP and UrlPrefix. Once the consumer discovers the broadcast, it is able to communicate over HTTP with the RESTful endpoint on the producer to find out what services it offers. The shopper will then continue the rest of the flow.", 
            "title": "How the wrapper and SDK work"
        }, 
        {
            "location": "/internal-structure/#whats-happening-inside-the-sdk", 
            "text": "We have open sourced the wrappers, example apps, and the Golang SDK. For an overview, see  Home .  Click  here  for more information about the Worldpay Within architecture.", 
            "title": "What's happening inside the SDK"
        }, 
        {
            "location": "/sample-service-messaging/", 
            "text": "Summary\n\n\nThis is an early reference guide which has evolved since it was first published. However, in combination with the SDK code, it should give you plenty of hints as to how to work with the SDK. \n\n\n\n\nService discovery messages\n\n\nWe're going to build a reference application to prove the concepts and APIs outlined above. This reference application will be implemented on the current range of platforms aimed at providing IoT services. These boards are typically running \u2018M\u2019 class processors which as yet do not contain an SE. Currently only the application processors (A class such as A57 Cortex) contain SEs. However developments are being made in the IoT platform space, for example ARM has released a new M architecture with does contain an SE, although there will be a delay before boards using these processors and compiler tools become mainstream. This document requires these more secure platforms to be available.\n\n\nService broadcast\n\n\n{\n\n    \nDeviceDescription\n:\n \nWorldpay Within Enabled Electric Car Charger\n,\n\n    \nHostname\n:\n \n[Your hostname]\n,\n\n    \nPortNumber\n:\n \n[\nYour\n \nport\n \nnumber\n],\n\n    \nServerID\n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nUrlPrefix\n:\n \nv1/carcharge\n\n\n}\n\n\n\n\n\nService list request\n\n\nTo build the URL, use the hostname and the port number, then concatenate the URL with \u201cservice/discover\u201d.\n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/service/discover\n\n\n \n{\n\n \n}\n \n\n\n\n\n\n\nNote\n\n\nThe body content is empty; the request is direct to the server, which is indicated in the broadcast.\n\n\n\n\nService list response\n\n\n{\n\n    \nServerID\n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nServices\n:\n \n[\n\n        \n{\n\n            \nServiceID\n:\n \n0\n,\n\n            \nServiceDescription\n:\n \nCar charging\n\n        \n},\n\n        \n{\n\n            \nServiceID\n:\n \n1\n,\n\n            \nServiceDescription\n:\n \nCar parking\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nService negotiation messages\n\n\nService price request\n\n\nTo build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201cprices\u201d.\n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/service/0/prices\n\n\n{\n\n\n}\n \n\n\n\n\n\n\nNote\n\n\nBody content is empty. URL includes the serviceID (i.e. 0) for the prices being requested, e.g. for serviceID 1, URL would be \n/v1/carcharge/service/1/prices\n)\n\n\n\n\nService price response\n\n\n{\n\n    \nServerID\n \n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nPrices\n \n:\n \n[\n\n        \n{\n\n            \nServiceID\n \n:\n \n0\n,\n\n            \nPriceID\n \n:\n \n0\n,\n\n            \nPricePerUnit\n \n:\n \n140\n,\n\n            \nUnitID\n \n:\n \n0\n,\n\n            \nUnitDescription\n \n:\n \nkW\n,\n\n            \nPriceDescription\n \n:\n \nSlow (3.6kWh)\n\n        \n},\n \n{\n\n            \nServiceID\n \n:\n \n0\n,\n\n            \nPriceID\n \n:\n \n1\n,\n\n            \nPricePerUnit\n \n:\n \n70\n,\n\n            \nUnitID\n \n:\n \n0\n,\n\n            \nUnitDescription\n \n:\n \nkW\n,\n\n            \nPriceDescription\n \n:\n \nMedium (7.2kWh)\n\n        \n},\n \n{\n\n            \nServiceID\n \n:\n \n0\n,\n\n            \nPriceID\n \n:\n \n2\n,\n\n            \nPricePerUnit\n \n:\n \n10\n,\n\n            \nUnitID\n \n:\n \n0\n,\n\n            \nUnitDescription\n \n:\n \nkW\n,\n\n            \nPriceDescription\n \n:\n \nSuper (120kWh)\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nGet Total price request\n\n\nTo build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \nservice ID\n and then \nrequestTotal\n.\n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/service/0/requestTotal\n\n\n{\n\n    \nClientID\n:\n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nSelectedNumberOfUnits\n:\n8\n,\n\n    \nSelectedPriceID\n:\n1\n\n\n}\n\n\n\n\n\nGet Total price response\n\n\n{\n\n    \nServerID\n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nClientID\n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nPriceID\n:\n \n1\n,\n\n    \nUnitsToSupply\n:\n \n8\n,\n\n    \nTotalPrice\n:\n \n560\n,\n\n    \nPaymentReferenceID\n:\n \ne7c18800-706d-4f0c-933c-19f8d5be72da\n,\n\n    \nMerchantClientKey\n:\n \n T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \n\n\n}\n\n\n\n\n\nToken request\n\n\nHTTP POST to:\n\n\nhttps://api.worldpay.com/v1/tokens\n\n\nNo custom HTTP headers used.\n\n\n{\n\n    \nclientKey\n \n:\n \nT_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n,\n\n    \npaymentMethod\n \n:\n \n{\n\n        \ncardNumber\n \n:\n \n1234567890124444\n,\n\n        \nexpiryMonth\n \n:\n \n2\n,\n\n        \nexpiryYear\n \n:\n \n2021\n,\n\n        \nname\n \n:\n \nBilbo Baggins\n,\n\n        \ntype\n \n:\n \nCard\n\n    \n},\n\n    \nreusable\n \n:\n \nfalse\n\n\n}\n\n\n\n\n\nToken response\n\n\n{\n\n    \ntoken\n:\n \nTEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy\n,\n\n    \npaymentMethod\n:\n \n{\n\n        \ntype\n:\n \nObfuscatedCard\n,\n\n        \nname\n:\n \nBilbo Baggins\n,\n\n        \nexpiryMonth\n:\n \n2\n,\n\n        \nexpiryYear\n:\n \n2021\n,\n\n        \ncardType\n:\n \nMASTERCARD_CREDIT\n,\n\n        \nmaskedCardNumber\n:\n \n**** **** **** 4444\n,\n\n        \ncardSchemeType\n:\n \nconsumer\n,\n\n        \ncardSchemeName\n:\n \nMCI CREDIT\n,\n\n        \ncardIssuer\n:\n \nLLOYDS BANK PLC\n,\n\n        \ncountryCode\n:\n \nGB\n,\n\n        \ncardClass\n:\n \ncredit\n,\n\n        \ncardProductTypeDescNonContactless\n:\n \nMasterCard Business\n,\n\n        \ncardProductTypeDescContactless\n:\n \nCL MasterCard Bus\n,\n\n        \nprepaid\n:\n \nunknown\n\n        \n},\n\n    \nreusable\n:\n \nfalse\n\n\n}\n\n\n\n\n\nPayment request\n\n\nHTTP POST to:\n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/payment\n\n\n{\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nClientToken\n \n:\n \nTEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \n,\n\n    \nPaymentReferenceID\n \n:\n \ne7c18800-706d-4f0c-933c-19f8d5be72da\n\n\n}\n\n\n\n\n\nOrder request\n\n\nHTTP POST to \nhttps://api.worldpay.com/v1/orders\n. \n\n\nHTTP header includes the Merchant's Service Key (Private)\n\n\n{\n\n    \namount\n \n:\n \n560\n,\n\n    \ncurrencyCode\n \n:\n \nGBP\n,\n\n    \ncustomerOrderCode\n \n:\n \nCar charge (8kW @ Medium (7.2kWh)) - 26\\/01\\/2016 15:40\n,\n\n    \norderDescription\n \n:\n \nCar charging payment\n,\n\n    \ntoken\n \n:\n \nTEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \n\n\n}\n\n\n\n\n\nOrder response\n\n\n{\n\n    \norderCode\n \n:\n \n4d22cb5d-5dfb-43ce-9108-dfe230151429\n,\n\n    \ntoken\n \n:\n \nTEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy \n,\n\n    \norderDescription\n \n:\n \nCar charging payment\n,\n\n    \namount\n \n:\n \n560\n,\n\n    \ncurrencyCode\n \n:\n \nGBP\n,\n\n    \npaymentStatus\n \n:\n \nSUCCESS\n,\n\n    \npaymentResponse\n \n:\n \n{\n\n        \ntype\n \n:\n \nObfuscatedCard\n,\n\n        \nname\n \n:\n \nBilbo Baggins\n,\n\n        \nexpiryMonth\n \n:\n \n2\n,\n\n        \nexpiryYear\n \n:\n \n2021\n,\n\n        \ncardType\n \n:\n \nMASTERCARD_CREDIT\n,\n\n        \nmaskedCardNumber\n \n:\n \n**** **** **** 4444\n,\n\n        \ncardSchemeType\n \n:\n \nconsumer\n,\n\n        \ncardSchemeName\n \n:\n \nMCI CREDIT\n,\n\n        \ncardIssuer\n \n:\n \nLLOYDS BANK PLC\n,\n\n        \ncountryCode\n \n:\n \nGB\n,\n\n        \ncardClass\n \n:\n \ncredit\n,\n\n        \ncardProductTypeDescNonContactless\n \n:\n \nMasterCard Business\n,\n\n        \ncardProductTypeDescContactless\n \n:\n \nCL MasterCard Bus\n,\n\n        \nprepaid\n \n:\n \nunknown\n\n    \n},\n\n    \ncustomerOrderCode\n \n:\n \nCar charge (8kW @ Medium (7.2kWh)) - 26/01/2016 15:40\n,\n\n    \nenvironment\n \n:\n \nTEST\n,\n\n    \nriskScore\n \n:\n \n{\n\n        \nvalue\n \n:\n \n1\n\n    \n}\n\n\n}\n\n\n\n\n\nPayment request response\n\n\n{\n\n    \nServerID\n \n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nTotalPaid\n \n:\n \n0\n,\n\n    \nServiceDeliveryToken\n \n:\n \n3e7b4c25-157d-4b47-999c-e4faba086590\n,\n\n    \nclient-uuid\n:\n719D329B-8909-4A8B-B352-E449C3132074\n\n\n}\n\n\n\n\n\nBegin Service Delivery request\n\n\nHTTP POST to \n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/service/0/delivery/begin\n\n\nURL encodes the \nserviceID\n being requested\n\n\n{\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nServiceDeliveryToken\n \n:\n \n3e7b4c25-157d-4b47-999c-e4faba086590\n,\n\n    \nUnitsToSupply\n \n:\n \n8\n\n\n}\n\n\n\n\n\nBegin Service Delivery response content:\n\n\n{\n\n    \nServerID\n \n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nServiceDeliveryToken\n \n:\n \n3e7b4c25-157d-4b47-999c-e4faba086590\n,\n\n    \nUnitsToSupply\n \n:\n \n8\n\n\n}\n\n\n\n\n\nEnd Service Delivery request\n\n\nHTTP POST to \n\n\nhttp://[Your hostname]:[Your port number]/v1/carcharge/service/0/delivery/end\n\n\nURL encodes the \nserviceID\n being requested\n\n\n{\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nServiceDeliveryToken\n \n:\n \n3e7b4c25-157d-4b47-999c-e4faba086590\n,\n\n    \nUnitsReceived\n \n:\n \n8\n\n\n}\n\n\n\n\n\nEnd Service Delivery response content\n\n\n{\n\n    \nServerID\n \n:\n \n58d8f9fb-b3e9-45bc-b701-fcdd295bc265\n,\n\n    \nClientID\n \n:\n \n54560ba2-87c0-4172-a904-67a9b7a5e1ee\n,\n\n    \nServiceDeliveryToken\n \n:\n \n3e7b4c25-157d-4b47-999c-e4faba086590\n,\n\n    \nUnitsJustSupplied\n \n:\n \n8\n,\n\n    \nUnitsRemaining\n \n:\n \n0\n\n\n}", 
            "title": "Sample service messaging"
        }, 
        {
            "location": "/sample-service-messaging/#service-discovery-messages", 
            "text": "We're going to build a reference application to prove the concepts and APIs outlined above. This reference application will be implemented on the current range of platforms aimed at providing IoT services. These boards are typically running \u2018M\u2019 class processors which as yet do not contain an SE. Currently only the application processors (A class such as A57 Cortex) contain SEs. However developments are being made in the IoT platform space, for example ARM has released a new M architecture with does contain an SE, although there will be a delay before boards using these processors and compiler tools become mainstream. This document requires these more secure platforms to be available.", 
            "title": "Service discovery messages"
        }, 
        {
            "location": "/sample-service-messaging/#service-broadcast", 
            "text": "{ \n     DeviceDescription :   Worldpay Within Enabled Electric Car Charger , \n     Hostname :   [Your hostname] , \n     PortNumber :   [ Your   port   number ], \n     ServerID :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     UrlPrefix :   v1/carcharge  }", 
            "title": "Service broadcast"
        }, 
        {
            "location": "/sample-service-messaging/#service-list-request", 
            "text": "To build the URL, use the hostname and the port number, then concatenate the URL with \u201cservice/discover\u201d.  http://[Your hostname]:[Your port number]/v1/carcharge/service/discover    { \n  }     Note  The body content is empty; the request is direct to the server, which is indicated in the broadcast.", 
            "title": "Service list request"
        }, 
        {
            "location": "/sample-service-messaging/#service-list-response", 
            "text": "{ \n     ServerID :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     Services :   [ \n         { \n             ServiceID :   0 , \n             ServiceDescription :   Car charging \n         }, \n         { \n             ServiceID :   1 , \n             ServiceDescription :   Car parking \n         } \n     ]  }", 
            "title": "Service list response"
        }, 
        {
            "location": "/sample-service-messaging/#service-negotiation-messages", 
            "text": "", 
            "title": "Service negotiation messages"
        }, 
        {
            "location": "/sample-service-messaging/#service-price-request", 
            "text": "To build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with \u201cservice ID\u201d and then \u201cprices\u201d.  http://[Your hostname]:[Your port number]/v1/carcharge/service/0/prices  {  }     Note  Body content is empty. URL includes the serviceID (i.e. 0) for the prices being requested, e.g. for serviceID 1, URL would be  /v1/carcharge/service/1/prices )", 
            "title": "Service price request"
        }, 
        {
            "location": "/sample-service-messaging/#service-price-response", 
            "text": "{ \n     ServerID   :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     Prices   :   [ \n         { \n             ServiceID   :   0 , \n             PriceID   :   0 , \n             PricePerUnit   :   140 , \n             UnitID   :   0 , \n             UnitDescription   :   kW , \n             PriceDescription   :   Slow (3.6kWh) \n         },   { \n             ServiceID   :   0 , \n             PriceID   :   1 , \n             PricePerUnit   :   70 , \n             UnitID   :   0 , \n             UnitDescription   :   kW , \n             PriceDescription   :   Medium (7.2kWh) \n         },   { \n             ServiceID   :   0 , \n             PriceID   :   2 , \n             PricePerUnit   :   10 , \n             UnitID   :   0 , \n             UnitDescription   :   kW , \n             PriceDescription   :   Super (120kWh) \n         } \n     ]  }", 
            "title": "Service price response"
        }, 
        {
            "location": "/sample-service-messaging/#get-total-price-request", 
            "text": "To build the URL, use the hostname, with the port number, the url prefix all concatenated. The concatenate with \u201cservice\u201d concatenated with  service ID  and then  requestTotal .  http://[Your hostname]:[Your port number]/v1/carcharge/service/0/requestTotal  { \n     ClientID : 54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     SelectedNumberOfUnits : 8 , \n     SelectedPriceID : 1  }", 
            "title": "Get Total price request"
        }, 
        {
            "location": "/sample-service-messaging/#get-total-price-response", 
            "text": "{ \n     ServerID :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     ClientID :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     PriceID :   1 , \n     UnitsToSupply :   8 , \n     TotalPrice :   560 , \n     PaymentReferenceID :   e7c18800-706d-4f0c-933c-19f8d5be72da , \n     MerchantClientKey :    T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   }", 
            "title": "Get Total price response"
        }, 
        {
            "location": "/sample-service-messaging/#token-request", 
            "text": "HTTP POST to:  https://api.worldpay.com/v1/tokens  No custom HTTP headers used.  { \n     clientKey   :   T_C_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx , \n     paymentMethod   :   { \n         cardNumber   :   1234567890124444 , \n         expiryMonth   :   2 , \n         expiryYear   :   2021 , \n         name   :   Bilbo Baggins , \n         type   :   Card \n     }, \n     reusable   :   false  }", 
            "title": "Token request"
        }, 
        {
            "location": "/sample-service-messaging/#token-response", 
            "text": "{ \n     token :   TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy , \n     paymentMethod :   { \n         type :   ObfuscatedCard , \n         name :   Bilbo Baggins , \n         expiryMonth :   2 , \n         expiryYear :   2021 , \n         cardType :   MASTERCARD_CREDIT , \n         maskedCardNumber :   **** **** **** 4444 , \n         cardSchemeType :   consumer , \n         cardSchemeName :   MCI CREDIT , \n         cardIssuer :   LLOYDS BANK PLC , \n         countryCode :   GB , \n         cardClass :   credit , \n         cardProductTypeDescNonContactless :   MasterCard Business , \n         cardProductTypeDescContactless :   CL MasterCard Bus , \n         prepaid :   unknown \n         }, \n     reusable :   false  }", 
            "title": "Token response"
        }, 
        {
            "location": "/sample-service-messaging/#payment-request", 
            "text": "HTTP POST to:  http://[Your hostname]:[Your port number]/v1/carcharge/payment  { \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     ClientToken   :   TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy  , \n     PaymentReferenceID   :   e7c18800-706d-4f0c-933c-19f8d5be72da  }", 
            "title": "Payment request"
        }, 
        {
            "location": "/sample-service-messaging/#order-request", 
            "text": "HTTP POST to  https://api.worldpay.com/v1/orders .   HTTP header includes the Merchant's Service Key (Private)  { \n     amount   :   560 , \n     currencyCode   :   GBP , \n     customerOrderCode   :   Car charge (8kW @ Medium (7.2kWh)) - 26\\/01\\/2016 15:40 , \n     orderDescription   :   Car charging payment , \n     token   :   TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy   }", 
            "title": "Order request"
        }, 
        {
            "location": "/sample-service-messaging/#order-response", 
            "text": "{ \n     orderCode   :   4d22cb5d-5dfb-43ce-9108-dfe230151429 , \n     token   :   TEST_SU_yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy  , \n     orderDescription   :   Car charging payment , \n     amount   :   560 , \n     currencyCode   :   GBP , \n     paymentStatus   :   SUCCESS , \n     paymentResponse   :   { \n         type   :   ObfuscatedCard , \n         name   :   Bilbo Baggins , \n         expiryMonth   :   2 , \n         expiryYear   :   2021 , \n         cardType   :   MASTERCARD_CREDIT , \n         maskedCardNumber   :   **** **** **** 4444 , \n         cardSchemeType   :   consumer , \n         cardSchemeName   :   MCI CREDIT , \n         cardIssuer   :   LLOYDS BANK PLC , \n         countryCode   :   GB , \n         cardClass   :   credit , \n         cardProductTypeDescNonContactless   :   MasterCard Business , \n         cardProductTypeDescContactless   :   CL MasterCard Bus , \n         prepaid   :   unknown \n     }, \n     customerOrderCode   :   Car charge (8kW @ Medium (7.2kWh)) - 26/01/2016 15:40 , \n     environment   :   TEST , \n     riskScore   :   { \n         value   :   1 \n     }  }", 
            "title": "Order response"
        }, 
        {
            "location": "/sample-service-messaging/#payment-request-response", 
            "text": "{ \n     ServerID   :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     TotalPaid   :   0 , \n     ServiceDeliveryToken   :   3e7b4c25-157d-4b47-999c-e4faba086590 , \n     client-uuid : 719D329B-8909-4A8B-B352-E449C3132074  }", 
            "title": "Payment request response"
        }, 
        {
            "location": "/sample-service-messaging/#begin-service-delivery-request", 
            "text": "HTTP POST to   http://[Your hostname]:[Your port number]/v1/carcharge/service/0/delivery/begin  URL encodes the  serviceID  being requested  { \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     ServiceDeliveryToken   :   3e7b4c25-157d-4b47-999c-e4faba086590 , \n     UnitsToSupply   :   8  }", 
            "title": "Begin Service Delivery request"
        }, 
        {
            "location": "/sample-service-messaging/#begin-service-delivery-response-content", 
            "text": "{ \n     ServerID   :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     ServiceDeliveryToken   :   3e7b4c25-157d-4b47-999c-e4faba086590 , \n     UnitsToSupply   :   8  }", 
            "title": "Begin Service Delivery response content:"
        }, 
        {
            "location": "/sample-service-messaging/#end-service-delivery-request", 
            "text": "HTTP POST to   http://[Your hostname]:[Your port number]/v1/carcharge/service/0/delivery/end  URL encodes the  serviceID  being requested  { \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     ServiceDeliveryToken   :   3e7b4c25-157d-4b47-999c-e4faba086590 , \n     UnitsReceived   :   8  }", 
            "title": "End Service Delivery request"
        }, 
        {
            "location": "/sample-service-messaging/#end-service-delivery-response-content", 
            "text": "{ \n     ServerID   :   58d8f9fb-b3e9-45bc-b701-fcdd295bc265 , \n     ClientID   :   54560ba2-87c0-4172-a904-67a9b7a5e1ee , \n     ServiceDeliveryToken   :   3e7b4c25-157d-4b47-999c-e4faba086590 , \n     UnitsJustSupplied   :   8 , \n     UnitsRemaining   :   0  }", 
            "title": "End Service Delivery response content"
        }, 
        {
            "location": "/api-spec/", 
            "text": "For the alpha release, we decided to go with five different languages. Their documented API can be found here:\n\n\n\n  \nNode.js\n\n  \nPython\n\n  \nJava\n\n  \n.NET\n\n  \nGo\n\n\n\n\n\nSpecification\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup\n\n\nSets up the wrapper to be able to start communicating with the underlying SDK.\n\n\n\n\n\n\naddService\n\n\nAdds a WWService service type to the producer (merchant). Used if the device you are operating on is a producer. If added to a device you intend as a consumer (shopper), this will give that device producer functionality.\n\n\n\n\n\n\nremoveService\n\n\nRemoves the service from the producer.\n\n\n\n\n\n\ninitConsumer\n\n\nInitiates the device as a consumer, which enables it to find services, choose prices, make payments and receive services.\n\n\n\n\n\n\ninitProducer\n\n\nInitiates the device as a producer / or initialises the producer capability.\n\n\n\n\n\n\ngetDevice\n\n\nProvides details of the the current device that the SDK is running on, and its credentials / information.\n\n\n\n\n\n\nstartServiceBroadcast\n\n\nEnables the producer device to start broadcasting itself via UDP broadcast over the network to notify devices it is available to be consumed.\n\n\n\n\n\n\nstopServiceBroadcast\n\n\nStops the SDK from broadcasting the messages that it is broadcasting.\n\n\n\n\n\n\ndeviceDiscovery\n\n\nEnables the consumer device to discover other devices broadcasting on the same UDP network.\n\n\n\n\n\n\nrequestServices\n\n\nGets a list of services that are available from the broadcasting device.\n\n\n\n\n\n\ngetServicePrices\n\n\nUsed by the consumer to get the list of prices associated with a particular \nserviceId\n.\n\n\n\n\n\n\nselectService\n\n\nPerformed by the consumer, this provides details of the service, the amount and at what price point it wants to purchase the service.\n\n\n\n\n\n\nmakePayment\n\n\nAllows the consumer to request a payment to be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a payment response detailing whether it was successful or not.\n\n\n\n\n\n\nbeginServiceDelivery\n\n\nRequested by the consumer, this begins the service delivery which proceeds as long as the correct information is provided to the producer. If the correct credentials are passed, the producer will start releasing the service known as a 'trusted trigger'.\n\n\n\n\n\n\nendServiceDelivery\n\n\nEnds the service delivery - a request initiated by the consumer.", 
            "title": "API Spec"
        }, 
        {
            "location": "/api-spec/#specification", 
            "text": "Parameter  Description      setup  Sets up the wrapper to be able to start communicating with the underlying SDK.    addService  Adds a WWService service type to the producer (merchant). Used if the device you are operating on is a producer. If added to a device you intend as a consumer (shopper), this will give that device producer functionality.    removeService  Removes the service from the producer.    initConsumer  Initiates the device as a consumer, which enables it to find services, choose prices, make payments and receive services.    initProducer  Initiates the device as a producer / or initialises the producer capability.    getDevice  Provides details of the the current device that the SDK is running on, and its credentials / information.    startServiceBroadcast  Enables the producer device to start broadcasting itself via UDP broadcast over the network to notify devices it is available to be consumed.    stopServiceBroadcast  Stops the SDK from broadcasting the messages that it is broadcasting.    deviceDiscovery  Enables the consumer device to discover other devices broadcasting on the same UDP network.    requestServices  Gets a list of services that are available from the broadcasting device.    getServicePrices  Used by the consumer to get the list of prices associated with a particular  serviceId .    selectService  Performed by the consumer, this provides details of the service, the amount and at what price point it wants to purchase the service.    makePayment  Allows the consumer to request a payment to be made at the producer device, by providing the total price response object as the request. The producer will then make the payment (or attempt to) and send back a payment response detailing whether it was successful or not.    beginServiceDelivery  Requested by the consumer, this begins the service delivery which proceeds as long as the correct information is provided to the producer. If the correct credentials are passed, the producer will start releasing the service known as a 'trusted trigger'.    endServiceDelivery  Ends the service delivery - a request initiated by the consumer.", 
            "title": "Specification"
        }, 
        {
            "location": "/hackathons/", 
            "text": "Payments \n IoT Hackathons\n\n\n3-5 November 2017 - Bucharest, Romania hackathon, with Worldpay Within\n\n\nIn November 2017, we hosted our third IoT hackathon. For the first time we were in Bucharest, Romania. Using the Internet of Things as the basis of the challenge, developers were given the task of using Worldpay's very own Worldpay Within SDK to build software that could make payments between two or more smart devices.\n\n\nFor more information, see the \nRomania hackathon\n page.\n\n\nFebruary 2017 - Atlanta hackathon, featuring Worldpay Within\n\n\nWorldpay US was a sponsor of the ATDC Fintech Hackathon, a weekend in which 18 teams competed in a battle to demonstrate how well they integrated either Worldpay or TSYS APIs into their own applications.\n\n\nFor more information, see the \nAtlanta hackathon\n page.\n\n\nSeptember 2016 - Our Inaugral Payments \n Iot hackathon\n\n\nWorldpay's Technology Innovation team held their first Internet of Things (IoT) hackathon at the Impact Hub in Westminster, London. It was the first time they'd hosted a hackathon and it was attended by over 80 technologists and experienced coders, who came together to explore use-cases for exciting mobile payments and new IoT open-source technology.\n\n\nOver the weekend participants brought to life a range of innovative concepts from building a payment system following a natural disaster, to payments apps for the sharing economy.\n\n\nSee our press releases \nhere\n and \nhere\n.\n\n\nWatch the video\n\n\nWe recorded what happened at the September 2016 hackathon. You'll hear from some of the delegates, judges, mentors, sponsors and organisers, and see some of the cool tech that was brought and awesome demos that were built that weekend.", 
            "title": "Hackathons"
        }, 
        {
            "location": "/hackathons/#payments-iot-hackathons", 
            "text": "", 
            "title": "Payments &amp; IoT Hackathons"
        }, 
        {
            "location": "/hackathons/#3-5-november-2017-bucharest-romania-hackathon-with-worldpay-within", 
            "text": "In November 2017, we hosted our third IoT hackathon. For the first time we were in Bucharest, Romania. Using the Internet of Things as the basis of the challenge, developers were given the task of using Worldpay's very own Worldpay Within SDK to build software that could make payments between two or more smart devices.  For more information, see the  Romania hackathon  page.", 
            "title": "3-5 November 2017 - Bucharest, Romania hackathon, with Worldpay Within"
        }, 
        {
            "location": "/hackathons/#february-2017-atlanta-hackathon-featuring-worldpay-within", 
            "text": "Worldpay US was a sponsor of the ATDC Fintech Hackathon, a weekend in which 18 teams competed in a battle to demonstrate how well they integrated either Worldpay or TSYS APIs into their own applications.  For more information, see the  Atlanta hackathon  page.", 
            "title": "February 2017 - Atlanta hackathon, featuring Worldpay Within"
        }, 
        {
            "location": "/hackathons/#september-2016-our-inaugral-payments-iot-hackathon", 
            "text": "Worldpay's Technology Innovation team held their first Internet of Things (IoT) hackathon at the Impact Hub in Westminster, London. It was the first time they'd hosted a hackathon and it was attended by over 80 technologists and experienced coders, who came together to explore use-cases for exciting mobile payments and new IoT open-source technology.  Over the weekend participants brought to life a range of innovative concepts from building a payment system following a natural disaster, to payments apps for the sharing economy.  See our press releases  here  and  here .", 
            "title": "September 2016 - Our Inaugral Payments &amp; Iot hackathon"
        }, 
        {
            "location": "/hackathons/#watch-the-video", 
            "text": "We recorded what happened at the September 2016 hackathon. You'll hear from some of the delegates, judges, mentors, sponsors and organisers, and see some of the cool tech that was brought and awesome demos that were built that weekend.", 
            "title": "Watch the video"
        }, 
        {
            "location": "/faqs/", 
            "text": "Frequently asked questions\n\n\nDuring the last Worldpay Within Hackthon, we identified some commonly-asked questions.\n\n\n1. How do I find my producer amongst everyone else's on the network?\n\n\nWhat is the problem?\n\n\nWhen you run your consumer, it might fail because it is finding the first producer on the network and wrongly assuming that it is your one!\n\n\nHow do I solve it?\n\n\nFirst, make sure your device name is unique.  In the examples below we use \n\"UniqueProducerName\"\n, but make sure you use something unique to your team or solution.\nHere is one way to do it (another way is to filter the list of discovered devices by device name or device description):\n\n\nNode.js\n\n\nReplace:\n\n\nclient.deviceDiscovery(10000, function (err, response) {...})\n\n\nWith:\n\n\nclient.searchForDevice(10000, \nUniqueProducerName\n, function (err, response) {...})\n\n\nPython\n\n\nReplace:\n\n\nwpw.deviceDiscovery(10000)\n\n\nWith:\n\n\noneSvcMsg = wpw.searchForDevice(10000, \nUniqueProducerName\n)\n\n\nJava\n\n\nReplace:\n\n\nSet\nWWServiceMessage\n devices = wpw.deviceDiscovery(10000);\n\n\nWith:\n\n\nWWServiceMessage device = wpw.searchForDevice(10000, \nUniqueProducerName\n);\n\n\nGo\n\n\nReplace:\n\n\nserviceMessages, err := wpw.DeviceDiscovery(10000)\n\n\nWith:\n\n\nserviceMessage, err := wpw.SearchForDevice(10000, \nUniqueProducerName\n)\n\n\nC# .NET\n\n\nReplace:\n\n\nWPWithinService.DeviceDiscovery(10000).ToList();\n\n\nWith:\n\n\nWPWithinService.SearchForDevice(10000, \nUniqueProducerName\n);\n\n\n2. I still can't find my producer. Why?\n\n\nIt could be that you're not waiting long enough for the producer to broadcast its message. The SDK broadcasts the producer message every 5000 milliseconds (that's every 5 seconds). So this means that your consumer has to be searching for the device for more than 5 seconds to ensure that it finds it.\nIf this is too long for you, and you're at a hackathon, come and talk to a mentor. Else, \nemail us\n.\n\n\n3. I've tried that but I still cannot find my producer.\n\n\n\n\nNote\n\n\nThis issue has mostly been found on Windows devices.\n\n\n\n\nIf none of your consumers can see a broadcasting producer then check to see which network interface the producer is broadcasting on.\nThe SDK will always broadcast on the first available network adapter.  So, for example, if you're using the Wireless network but your first adapter when you list the interfaces is \neth0\n, then your broadcasts will be on \neth0\n and \nnot\n on the \nwlan0\n or any other wireless adapter.\nTo fix this, the easiest thing to do is to disable the unused adapter so that your wireless adapter is the first one. Alternatively you can modify the routing table so that \n255.255.255.255\n goes to the right adapter.\n\n\n4. Can I change the operating system on our Raspberry Pi?\n\n\nOur Raspberry Pis come pre-loaded with Raspbian, but during the hackathon you can choose whichever operating system you'd like (as long as it works on a Raspberry Pi!).\n\n\n5. How can I see what I'm actually doing on my Raspberry Pi?\n\n\nWe'd recommend you use \nVNC Viewer\n. We used it at the Romania Hackathon and it worked well.\n\n\n6. What currency should I use?\n\n\nWe'd recommend you use GBP for now.\n\n\n7. Why can't I get the .NET SDK to work on my Raspberry Pi?\n\n\nIt doesn't work yet, but we're looking to get it working.", 
            "title": "FAQs"
        }, 
        {
            "location": "/faqs/#frequently-asked-questions", 
            "text": "During the last Worldpay Within Hackthon, we identified some commonly-asked questions.", 
            "title": "Frequently asked questions"
        }, 
        {
            "location": "/faqs/#1-how-do-i-find-my-producer-amongst-everyone-elses-on-the-network", 
            "text": "", 
            "title": "1. How do I find my producer amongst everyone else's on the network?"
        }, 
        {
            "location": "/faqs/#what-is-the-problem", 
            "text": "When you run your consumer, it might fail because it is finding the first producer on the network and wrongly assuming that it is your one!", 
            "title": "What is the problem?"
        }, 
        {
            "location": "/faqs/#how-do-i-solve-it", 
            "text": "First, make sure your device name is unique.  In the examples below we use  \"UniqueProducerName\" , but make sure you use something unique to your team or solution.\nHere is one way to do it (another way is to filter the list of discovered devices by device name or device description):", 
            "title": "How do I solve it?"
        }, 
        {
            "location": "/faqs/#nodejs", 
            "text": "Replace:  client.deviceDiscovery(10000, function (err, response) {...})  With:  client.searchForDevice(10000,  UniqueProducerName , function (err, response) {...})", 
            "title": "Node.js"
        }, 
        {
            "location": "/faqs/#python", 
            "text": "Replace:  wpw.deviceDiscovery(10000)  With:  oneSvcMsg = wpw.searchForDevice(10000,  UniqueProducerName )", 
            "title": "Python"
        }, 
        {
            "location": "/faqs/#java", 
            "text": "Replace:  Set WWServiceMessage  devices = wpw.deviceDiscovery(10000);  With:  WWServiceMessage device = wpw.searchForDevice(10000,  UniqueProducerName );", 
            "title": "Java"
        }, 
        {
            "location": "/faqs/#go", 
            "text": "Replace:  serviceMessages, err := wpw.DeviceDiscovery(10000)  With:  serviceMessage, err := wpw.SearchForDevice(10000,  UniqueProducerName )", 
            "title": "Go"
        }, 
        {
            "location": "/faqs/#c-net", 
            "text": "Replace:  WPWithinService.DeviceDiscovery(10000).ToList();  With:  WPWithinService.SearchForDevice(10000,  UniqueProducerName );", 
            "title": "C# .NET"
        }, 
        {
            "location": "/faqs/#2-i-still-cant-find-my-producer-why", 
            "text": "It could be that you're not waiting long enough for the producer to broadcast its message. The SDK broadcasts the producer message every 5000 milliseconds (that's every 5 seconds). So this means that your consumer has to be searching for the device for more than 5 seconds to ensure that it finds it.\nIf this is too long for you, and you're at a hackathon, come and talk to a mentor. Else,  email us .", 
            "title": "2. I still can't find my producer. Why?"
        }, 
        {
            "location": "/faqs/#3-ive-tried-that-but-i-still-cannot-find-my-producer", 
            "text": "Note  This issue has mostly been found on Windows devices.   If none of your consumers can see a broadcasting producer then check to see which network interface the producer is broadcasting on.\nThe SDK will always broadcast on the first available network adapter.  So, for example, if you're using the Wireless network but your first adapter when you list the interfaces is  eth0 , then your broadcasts will be on  eth0  and  not  on the  wlan0  or any other wireless adapter.\nTo fix this, the easiest thing to do is to disable the unused adapter so that your wireless adapter is the first one. Alternatively you can modify the routing table so that  255.255.255.255  goes to the right adapter.", 
            "title": "3. I've tried that but I still cannot find my producer."
        }, 
        {
            "location": "/faqs/#4-can-i-change-the-operating-system-on-our-raspberry-pi", 
            "text": "Our Raspberry Pis come pre-loaded with Raspbian, but during the hackathon you can choose whichever operating system you'd like (as long as it works on a Raspberry Pi!).", 
            "title": "4. Can I change the operating system on our Raspberry Pi?"
        }, 
        {
            "location": "/faqs/#5-how-can-i-see-what-im-actually-doing-on-my-raspberry-pi", 
            "text": "We'd recommend you use  VNC Viewer . We used it at the Romania Hackathon and it worked well.", 
            "title": "5. How can I see what I'm actually doing on my Raspberry Pi?"
        }, 
        {
            "location": "/faqs/#6-what-currency-should-i-use", 
            "text": "We'd recommend you use GBP for now.", 
            "title": "6. What currency should I use?"
        }, 
        {
            "location": "/faqs/#7-why-cant-i-get-the-net-sdk-to-work-on-my-raspberry-pi", 
            "text": "It doesn't work yet, but we're looking to get it working.", 
            "title": "7. Why can't I get the .NET SDK to work on my Raspberry Pi?"
        }, 
        {
            "location": "/atdc/", 
            "text": "Atlanta Fintech Hackathon\n\n\nHere you'll find information about what technology we used during the Atlanta Fintech Hackathon. It includes how to set up your Raspberry Pi, how to see your transactions on Worldpay Total, and how to set up the Python wrapper.\n\n\nSetting up your Pi for Worldpay Within @ ATDC hackathon\n\n\nQuick start\n\n\n\n\nGet a pre-provisioned SD card, which should put you on the 'Connectify' network.\n\n\nThe go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this.\n\n\n\n\nHow to see my transactions on Worldpay Total?\n\n\nDon't get this confused with the Global/European system. For this hackathon you can view the transactions through the virtual terminal here: \nterminal.demo.securenet.com\n - login credentials from Clint.\n\n\nAndroid wrapper?\n\n\nWe have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.\n\n\nIt is probably better to use a 'proxy' Pi as your consumer, and expose each step/feature as a simple RESTful API, which the Android can call to orchestrate the flow. The business logic can then be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic.\n\n\nSelf provision the Raspberry Pi\n\n\n\n\nGet the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123.\n\n\nYou should now be able to do the rest yourself, by ssh-ing to the device at \nssh pi@wppi##\n e.g. for the Pi number 40: \nssh pi@wppi40\n.\n\n\nChange to the directory with the Worldpay Within SDK in it: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/\n.\n\n\nChange to the develop branch \ngit checkout develop\n.\n\n\nPull the latest code \ngit pull\n.\n\n\nGet the latest RPC-agent for Raspberry pi \nwget http://bit.ly/wpwlinarm32\n.\n\n\n\n\nHow to setup the Python 2.7 wrapper\n\n\n\n\nIf you want to use the 2.7 python wrapper, then download Apache Thrift 0.10.0 (latest version).\n\n\nExtract it and change to the \nlib/py/\n directory.\n\n\nRun the following command \nsudo python setup.py install\n.\n\n\nPlace the RPC-agent in the python wrapper directory: \n~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7\n.\n\n\nRename to \nrpc-agent\n, run \nsudo chmod ugo+x rpc-agent\n.\n\n\nTest run it with \n./rpc-agent -port 9018\n, then close it using ctrl-C and make sure it is killed using \nps -e | grep rpc-agent\n and if it's still running do a \nKill \nprocess-id\n.\n\n\nYou're now ready to provision your device with your securenet credentials, and the run the example apps.\n\n\n\n\nClick \nhere\n for more information about the Python wrapper.\n\n\nHow to setup the other wrappers\n\n\nIf you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:\n\n\n\n\nJava\n wrapper - or talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs.\n\n\nNode.js\n - or talk to Conor.\n\n\nPython 3\n - talk to Kevin (HINT: once you've got this wrapper, theres a self-contained setup.py).\n\n\n.net wrapper\n - or talk to Conor or Kevin.\n\n\n\n\n\n\nNote\n\n\nWith various support on the wrappers (2.7 python does not yet support), you can use an environment variable for finding your rpc-agent\n\n\n\n\nSet the environmental variable \nWPW_HOME\n which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.\n\n\nFor the Node.js and Java wrappers, first check if \n$WPW_HOME\n is set. If so, the wrappers launch the appropriately named Rpc-agent from \n$WPW_HOME/bin/\n. If not then look for the RPC agent in the \n./rpc-agent-bin/\n directory. For example, for Mac OS (go with it that it's called amd64...):\n\n\n\n\n$WPW_HOME/bin/rpc-agent-darwin-amd64\n\n\n./rpc-agent-bin/rpc-agent-darwin-amd64\n\n\n\n\nDeploying the Java wrapper to the Pi\n\n\nAssuming you have the consumer or producer app setup in your favourite IDE:\n\n\n\n\nDo a clean build of the consumer app to generate a dist directory.\n\n\nCreate a \ndistribtopi\n directory.\n\n\nCopy the contents of \ndist\n into the \ndistribtopi\n.\n\n\nIn this directory create a subdirectory called \nrpc-agent-bin\n.\n\n\nFrom the latest release, get the Raspberry pi rpc-agent \nrpc-agent-linux-arm32\n.\n\n\nZip up this package and put onto your Pi however you prefer.\n\n\nUnzip on the Pi.\n\n\nRun the program with \njava -jar \nName-of-your-app\n.jar\n.\n\n\nAny issues you can't debug, come and have a chat with Kevin or Conor we're happy to help.\n\n\n\n\nSupport\n\n\nAny issues with setting up Worldpay Within (and the wrappers) on your Raspberry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!", 
            "title": "(hidden) Atlanta Fintech Hackathon"
        }, 
        {
            "location": "/atdc/#atlanta-fintech-hackathon", 
            "text": "Here you'll find information about what technology we used during the Atlanta Fintech Hackathon. It includes how to set up your Raspberry Pi, how to see your transactions on Worldpay Total, and how to set up the Python wrapper.", 
            "title": "Atlanta Fintech Hackathon"
        }, 
        {
            "location": "/atdc/#setting-up-your-pi-for-worldpay-within-atdc-hackathon", 
            "text": "", 
            "title": "Setting up your Pi for Worldpay Within @ ATDC hackathon"
        }, 
        {
            "location": "/atdc/#quick-start", 
            "text": "Get a pre-provisioned SD card, which should put you on the 'Connectify' network.  The go, and RPi Python wrapper should be ready to go, the RPC agent is available for you to provision the other wrappers too. Speak to Conor or Kevin for help with this.", 
            "title": "Quick start"
        }, 
        {
            "location": "/atdc/#how-to-see-my-transactions-on-worldpay-total", 
            "text": "Don't get this confused with the Global/European system. For this hackathon you can view the transactions through the virtual terminal here:  terminal.demo.securenet.com  - login credentials from Clint.", 
            "title": "How to see my transactions on Worldpay Total?"
        }, 
        {
            "location": "/atdc/#android-wrapper", 
            "text": "We have not developed an Android wrapper, however there is one in development on the 'native-interface' branch, which allows you to call into the RPC-agent/SDC by going directly without need for RPC. This partially works, and is not certified, and is on older code, but you are free to experiment with this.  It is probably better to use a 'proxy' Pi as your consumer, and expose each step/feature as a simple RESTful API, which the Android can call to orchestrate the flow. The business logic can then be included in the Android app, with the Worldpay Within SDK running on the Pi. Please discuss with Conor for any more help on this topic.", 
            "title": "Android wrapper?"
        }, 
        {
            "location": "/atdc/#self-provision-the-raspberry-pi", 
            "text": "Get the Pi to the provisioning team so they can get it on the Connectify network, or choose Connectify with password: wpt1c123.  You should now be able to do the rest yourself, by ssh-ing to the device at  ssh pi@wppi##  e.g. for the Pi number 40:  ssh pi@wppi40 .  Change to the directory with the Worldpay Within SDK in it:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/ .  Change to the develop branch  git checkout develop .  Pull the latest code  git pull .  Get the latest RPC-agent for Raspberry pi  wget http://bit.ly/wpwlinarm32 .", 
            "title": "Self provision the Raspberry Pi"
        }, 
        {
            "location": "/atdc/#how-to-setup-the-python-27-wrapper", 
            "text": "If you want to use the 2.7 python wrapper, then download Apache Thrift 0.10.0 (latest version).  Extract it and change to the  lib/py/  directory.  Run the following command  sudo python setup.py install .  Place the RPC-agent in the python wrapper directory:  ~/go/src/github.com/wptechinnovation/worldpay-within-sdk/wrappers/python_2-7 .  Rename to  rpc-agent , run  sudo chmod ugo+x rpc-agent .  Test run it with  ./rpc-agent -port 9018 , then close it using ctrl-C and make sure it is killed using  ps -e | grep rpc-agent  and if it's still running do a  Kill  process-id .  You're now ready to provision your device with your securenet credentials, and the run the example apps.   Click  here  for more information about the Python wrapper.", 
            "title": "How to setup the Python 2.7 wrapper"
        }, 
        {
            "location": "/atdc/#how-to-setup-the-other-wrappers", 
            "text": "If you want to use the Java, Node.js, Python 3 or .Net wrappers then here is further information about the setup:   Java  wrapper - or talk to Conor or Kevin, you'll need to setup a project with the source and pull in the libs.  Node.js  - or talk to Conor.  Python 3  - talk to Kevin (HINT: once you've got this wrapper, theres a self-contained setup.py).  .net wrapper  - or talk to Conor or Kevin.    Note  With various support on the wrappers (2.7 python does not yet support), you can use an environment variable for finding your rpc-agent   Set the environmental variable  WPW_HOME  which is the path to the WPWithin Home. Binaries should go in the $WPW_HOME/bin directory.  For the Node.js and Java wrappers, first check if  $WPW_HOME  is set. If so, the wrappers launch the appropriately named Rpc-agent from  $WPW_HOME/bin/ . If not then look for the RPC agent in the  ./rpc-agent-bin/  directory. For example, for Mac OS (go with it that it's called amd64...):   $WPW_HOME/bin/rpc-agent-darwin-amd64  ./rpc-agent-bin/rpc-agent-darwin-amd64", 
            "title": "How to setup the other wrappers"
        }, 
        {
            "location": "/atdc/#deploying-the-java-wrapper-to-the-pi", 
            "text": "Assuming you have the consumer or producer app setup in your favourite IDE:   Do a clean build of the consumer app to generate a dist directory.  Create a  distribtopi  directory.  Copy the contents of  dist  into the  distribtopi .  In this directory create a subdirectory called  rpc-agent-bin .  From the latest release, get the Raspberry pi rpc-agent  rpc-agent-linux-arm32 .  Zip up this package and put onto your Pi however you prefer.  Unzip on the Pi.  Run the program with  java -jar  Name-of-your-app .jar .  Any issues you can't debug, come and have a chat with Kevin or Conor we're happy to help.", 
            "title": "Deploying the Java wrapper to the Pi"
        }, 
        {
            "location": "/atdc/#support", 
            "text": "Any issues with setting up Worldpay Within (and the wrappers) on your Raspberry Pi or Development machine please reach out to Conor Hackett or Kevin Gordon, who will be able to support you over this weekend. They've familiar with a few gotchas, and will be able to get you up and running in no time!", 
            "title": "Support"
        }, 
        {
            "location": "/romania-hackathon/", 
            "text": "Worldpay\u2019s Bucharest Hackathon\n\n\nThe event in Romania\n\n\nOn Friday 3 November 2017, developers, designers, makers, entrepreneurs, and  mentors (from Worldpay and the hackathon sponsors) descended on The Impact Hub, Bucharest, for Worldpay\u2019s first ever hackathon in Romania. Based on the ideas of the Internet of Things, Worldpay\u2019s own Worldpay Within SDK was put through its paces as teams of developers worked on building software that allowed smart devices to make payments to each other.\n\n\n\n\n\nThe event was a resounding success; the venue was alight with an exciting buzz of ideas as the teams started to visualise what they\u2019re going to build and how they\u2019re going to go about doing it. You can see photos from the event \nhere\n.\n\n\nThe contestants blew us away with just how innovative their ideas were. The ideas ranged from a Smart Cat feeding bowl - which could pay for food when the bowl was empty - and even Smart Car Parking, which pays for a parking space when you arrive in the spot. Some teams even utilised small little drones that could be used to make a payment at a shop!\n\n\n\n\nA team working on their idea\n\n\nFrom a Worldpay perspective, it was a very insightful experience. The Innovation Team had created the SDK from the ground up, and the developers hacking it really helped us to understand some of the limitations of the SDK, and where it could be improved. These are just a few of our findings:\n\n\n\n\nThe Python, Node.js and Java SDKs were the most popular\n\n\nThere was a significant demand for an Android version of the SDK\n\n\nDevelopers would like us to build more examples of the SDK\n\n\nThere was interest for us to create a webinar on how to use each SDK\n\n\n\n\nSo, who won?\n\n\nThere were three judges: one from Worldpay, one from Endava, and one from Consult Hyperion. Speaking to them after the judging was complete, it was clear to see that they loved all of the ideas. But, of the 13 groups, there could only be one winner.\n\n\nThe team that built the Smart Utilities platform won the 9000 RON prize. They created a platform which allows the selection of the cheapest time to use electricity in a home. So, if you want to do your laundry on a Sunday, you\u2019d select this based on an app that the team created and the SDK communicates with the electricity providers to find the cheapest time of the day to run the wash. This not only saves you money, but it saves the environment too! Well done, guys!\n\n\n\n\nThe hackathon winners\n\n\nWhat happens now?\n\n\nWell, just because our first ever Romanian hackathon event is over, it doesn\u2019t mean that the development ends here. We\u2019ve got a list of over 30 things that we\u2019ve taken away from the event. We\u2019re going to go back to Worldpay HQ with a wealth of ideas to build on the many successes and failures (there were only a couple, promise!), to make sure that the Worldpay Within SDK is the driving force of Worldpay\u2019s involvement in the Internet of Things.\n\n\nA final thanks\n\n\nWe couldn\u2019t have done it without our sponsors Endava and Consult Hyperion (and their judges). And the event wouldn\u2019t have even taken place without the unending support of BeMyApp, who helped organise the event and provided platforms and infrastructure for the event. We'd also like to thank the  mentors and the organisation team from Worldpay, who provided support throughout the event.\n\n\nWe\u2019d love to thank each and every contestant who attended the hackathon. It\u2019s inspiring to see such passion, such interest for the Internet of Things, and it was inspirational to see just what could be created using our SDK.\n\n\n\n\nGroup photo of us at the hackathon", 
            "title": "(hidden) Romania Hackathon"
        }, 
        {
            "location": "/romania-hackathon/#worldpays-bucharest-hackathon", 
            "text": "", 
            "title": "Worldpay\u2019s Bucharest Hackathon"
        }, 
        {
            "location": "/romania-hackathon/#the-event-in-romania", 
            "text": "On Friday 3 November 2017, developers, designers, makers, entrepreneurs, and  mentors (from Worldpay and the hackathon sponsors) descended on The Impact Hub, Bucharest, for Worldpay\u2019s first ever hackathon in Romania. Based on the ideas of the Internet of Things, Worldpay\u2019s own Worldpay Within SDK was put through its paces as teams of developers worked on building software that allowed smart devices to make payments to each other.   The event was a resounding success; the venue was alight with an exciting buzz of ideas as the teams started to visualise what they\u2019re going to build and how they\u2019re going to go about doing it. You can see photos from the event  here .  The contestants blew us away with just how innovative their ideas were. The ideas ranged from a Smart Cat feeding bowl - which could pay for food when the bowl was empty - and even Smart Car Parking, which pays for a parking space when you arrive in the spot. Some teams even utilised small little drones that could be used to make a payment at a shop!   A team working on their idea  From a Worldpay perspective, it was a very insightful experience. The Innovation Team had created the SDK from the ground up, and the developers hacking it really helped us to understand some of the limitations of the SDK, and where it could be improved. These are just a few of our findings:   The Python, Node.js and Java SDKs were the most popular  There was a significant demand for an Android version of the SDK  Developers would like us to build more examples of the SDK  There was interest for us to create a webinar on how to use each SDK", 
            "title": "The event in Romania"
        }, 
        {
            "location": "/romania-hackathon/#so-who-won", 
            "text": "There were three judges: one from Worldpay, one from Endava, and one from Consult Hyperion. Speaking to them after the judging was complete, it was clear to see that they loved all of the ideas. But, of the 13 groups, there could only be one winner.  The team that built the Smart Utilities platform won the 9000 RON prize. They created a platform which allows the selection of the cheapest time to use electricity in a home. So, if you want to do your laundry on a Sunday, you\u2019d select this based on an app that the team created and the SDK communicates with the electricity providers to find the cheapest time of the day to run the wash. This not only saves you money, but it saves the environment too! Well done, guys!   The hackathon winners", 
            "title": "So, who won?"
        }, 
        {
            "location": "/romania-hackathon/#what-happens-now", 
            "text": "Well, just because our first ever Romanian hackathon event is over, it doesn\u2019t mean that the development ends here. We\u2019ve got a list of over 30 things that we\u2019ve taken away from the event. We\u2019re going to go back to Worldpay HQ with a wealth of ideas to build on the many successes and failures (there were only a couple, promise!), to make sure that the Worldpay Within SDK is the driving force of Worldpay\u2019s involvement in the Internet of Things.", 
            "title": "What happens now?"
        }, 
        {
            "location": "/romania-hackathon/#a-final-thanks", 
            "text": "We couldn\u2019t have done it without our sponsors Endava and Consult Hyperion (and their judges). And the event wouldn\u2019t have even taken place without the unending support of BeMyApp, who helped organise the event and provided platforms and infrastructure for the event. We'd also like to thank the  mentors and the organisation team from Worldpay, who provided support throughout the event.  We\u2019d love to thank each and every contestant who attended the hackathon. It\u2019s inspiring to see such passion, such interest for the Internet of Things, and it was inspirational to see just what could be created using our SDK.   Group photo of us at the hackathon", 
            "title": "A final thanks"
        }
    ]
}